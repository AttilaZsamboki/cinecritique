[{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\drizzle.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\postcss.config.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":1,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":5,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\prettier.config.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":2,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":4,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/** @type {import('prettier').Config & import('prettier-plugin-tailwindcss').PluginOptions} */\nexport default {\n  plugins: [\"prettier-plugin-tailwindcss\"],\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\[id]\\MovieDetailsClient.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":94,"column":22,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":94,"endColumn":28,"fix":{"range":[4087,4088],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":97,"endColumn":88},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":143,"column":81,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":143,"endColumn":86,"fix":{"range":[6671,6672],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":144,"column":79,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":144,"endColumn":84,"fix":{"range":[6758,6759],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":295,"column":58,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":295,"endColumn":67,"fix":{"range":[13642,13643],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":313,"column":39,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":313,"endColumn":47,"fix":{"range":[14956,14957],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":313,"column":59,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":313,"endColumn":67,"fix":{"range":[14976,14977],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":313,"column":81,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":313,"endColumn":89,"fix":{"range":[14998,14999],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":317,"column":46,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":317,"endColumn":54,"fix":{"range":[15158,15159],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":346,"column":69,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":346,"endColumn":76,"fix":{"range":[17160,17161],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":366,"column":36,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":366,"endColumn":44,"fix":{"range":[18165,18166],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":376,"column":33,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":376,"endColumn":41,"fix":{"range":[18824,18825],"text":""}}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":"\"use client\";\nimport Link from \"next/link\";\nimport { api } from \"~/trpc/react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"~/components/ui/tooltip\"\nimport { useMemo, useState, type JSX } from \"react\";\nimport { toYouTubeEmbedUrl } from \"~/lib/utils\";\n\nexport default function MovieDetailsClient({ movieId }: { movieId: string }) {\n  // Fetch all data via tRPC\n  const { data: movie, isLoading: movieLoading } = api.movie.getById.useQuery({ id: movieId });\n  const { data: allCriteria = [], isLoading: criteriaLoading } = api.movie.getAllCriteria.useQuery();\n  const { data: applicable = [], isLoading: applicableLoading } = api.movie.getApplicableCriteriaForMovie.useQuery({ movieId });\n  const { data: evaluations = [] } = api.movie.getEvaluationsByMovie.useQuery({ movieId });\n  const evalIds = evaluations.map(e => e.id);\n  const { data: scores = [] } = api.movie.getScoresByEvaluationIds.useQuery({ evalIds });\n  const { data: bestOfAll = [] } = api.movie.getBestOfForAll.useQuery();\n  const utils = api.useUtils();\n  const fetchMovieData = api.omdb.getByTitle.useMutation({\n    onSuccess: async () => {\n      await utils.movie.getById.invalidate({ id: movieId });\n    },\n  })\n  const upsertScore = api.movie.upsertEvaluationScore.useMutation({\n    onSuccess: () => {\n      utils.movie.getScoresByEvaluationIds.invalidate({ evalIds }).catch(() => {});\n    },\n  });\n  const addToCurated = api.movie.addToBestOfList.useMutation({\n    onSuccess: async () => {\n      await utils.movie.getBestOfForAll.invalidate();\n    },\n  });\n  const updatePoster = api.movie.updateMoviePoster.useMutation({\n    onSuccess: async () => {\n      await utils.movie.getById.invalidate({ id: movieId });\n    },\n  });\n\n  const [confirm, setConfirm] = useState<{\n    criteriaId: string,\n    clipUrlInput?: string,\n  } | null>(null);\n  // Optimistic per-sub-criteria average override for snappier star input\n  const [localSubAvg, setLocalSubAvg] = useState<Record<string, number | undefined>>({});\n  // Collapsible overrides panel per main criteria\n  const [openOverrides, setOpenOverrides] = useState<Set<string>>(new Set());\n  const currentBestByCriteria: Record<string, {movieId: string, clipUrl?: string}> = {};\n  for (const b of bestOfAll) {\n    if (b.criteriaId && b.movieId) currentBestByCriteria[b.criteriaId] = { movieId: b.movieId, clipUrl: b.clipUrl ?? undefined };\n  }\n\n  // Minimal editor to include/exclude/inherit sub-criteria for this movie\n  function OverridesEditor({ criterias, applicableIds, movieId, parentId }: { criterias: typeof allCriteria; applicableIds: Set<string | undefined>; movieId: string, parentId?: string }) {\n    const subs = criterias.filter(c => c.parentId && (!parentId || c.parentId === parentId));\n    const [q, setQ] = useState(\"\");\n    const { data: overrides = [], refetch } = api.movie.getMovieCriteriaOverrides.useQuery({ movieId });\n    const setOverride = api.movie.setMovieCriteriaOverride.useMutation({\n      onSuccess: async () => {\n        await Promise.all([\n          refetch(),\n          utils.movie.getApplicableCriteriaForMovie.invalidate({ movieId }),\n        ]);\n      }\n    });\n    const clearOverride = api.movie.clearMovieCriteriaOverride.useMutation({\n      onSuccess: async () => {\n        await Promise.all([\n          refetch(),\n          utils.movie.getApplicableCriteriaForMovie.invalidate({ movieId }),\n        ]);\n      }\n    });\n\n    const overrideMap = new Map(overrides.map(o => [o.criteriaId, o.mode] as const));\n\n    const filtered = subs.filter(sc => (sc.name ?? \"\").toLowerCase().includes(q.toLowerCase()));\n\n    return (\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center gap-2\">\n          <input\n            className=\"w-full rounded-xl border border-[#e7d0d1] bg-white px-3 py-2 text-sm text-[#1b0e0e]\"\n            placeholder=\"Search criteria in this section...\"\n            value={q}\n            onChange={(e) => setQ(e.target.value)}\n          />\n        </div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n        {filtered.map(sc => {\n          const id = sc.id!;\n          const effIncluded = applicableIds.has(id);\n          const ov = overrideMap.get(id);\n          const state: 'inherit' | 'include' | 'exclude' = ov ? (ov as any) : 'inherit';\n          return (\n            <div key={id} className=\"flex items-center justify-between border border-[#e7d0d1] rounded-xl px-3 py-2 bg-white/80\">\n              <div className=\"text-sm text-[#1b0e0e] mr-3 min-w-0 flex-1\">\n                <div className=\"font-medium truncate flex items-center gap-2\">\n                  <span className=\"truncate\">{sc.name}</span>\n                  {state !== 'inherit' && (\n                    <span className={`inline-flex items-center rounded-full px-2 py-0.5 text-[10px] font-medium ${state==='include' ? 'bg-emerald-100 text-emerald-800' : 'bg-rose-100 text-rose-800'}`}>\n                      {state}\n                    </span>\n                  )}\n                </div>\n                <div className=\"text-xs opacity-70\">Effective: {effIncluded ? 'Included' : 'Excluded'}</div>\n              </div>\n              <div className=\"flex items-center gap-1 bg-white rounded-lg border border-[#e7d0d1] p-0.5\">\n                <button\n                  className={`px-2 py-1 rounded-md text-xs ${state==='inherit' ? 'bg-[#f3e7e8] text-[#1b0e0e]' : 'text-[#6b4a4c]'}`}\n                  onClick={() => clearOverride.mutate({ movieId, criteriaId: id })}\n                  title=\"Inherit\"\n                >Inherit</button>\n                <button\n                  className={`px-2 py-1 rounded-md text-xs ${state==='include' ? 'bg-[#e6f6ef] text-[#135c36]' : 'text-[#6b4a4c]'}`}\n                  onClick={() => setOverride.mutate({ movieId, criteriaId: id, mode: 'include' })}\n                  title=\"Include\"\n                >Include</button>\n                <button\n                  className={`px-2 py-1 rounded-md text-xs ${state==='exclude' ? 'bg-[#fde8ea] text-[#7a1f27]' : 'text-[#6b4a4c]'}`}\n                  onClick={() => setOverride.mutate({ movieId, criteriaId: id, mode: 'exclude' })}\n                  title=\"Exclude\"\n                >Exclude</button>\n              </div>\n            </div>\n          );\n        })}\n        </div>\n      </div>\n    );\n  }\n\n  const criteriaById = useMemo(() => Object.fromEntries(allCriteria.map(c => [c.id, c] as const)), [allCriteria]);\n  // No need to fetch current holder; we now allow multiple curated per criteria\n\n  // Loading state\n\n  // Build criteria tree\n  const applicableIds = new Set(applicable.map(c => c.id));\n  const mainCriteria = allCriteria.filter(c => !c.parentId && applicableIds.has(c.id!));\n  const subCriteria = allCriteria.filter(c => c.parentId && applicableIds.has(c.id!));\n\n  // Map: evaluationId -> [score]\n  const evalScores: Record<string, {criteriaId: string, score: number}[]> = {};\n  scores.forEach(s => {\n    if (s.evaluationId) {\n      if (!evalScores[s.evaluationId]) evalScores[s.evaluationId] = [];\n      evalScores[s.evaluationId]?.push({ criteriaId: s.criteriaId ?? '', score: Number(s.score) });\n    }\n  });\n\n  // Movie meta editor (type/genre)\n  const [typeInput, setTypeInput] = useState<string>(movie?.type ?? \"\");\n  const [genreInput, setGenreInput] = useState<string>(movie?.genre ?? \"\");\n  const updateMeta = api.movie.updateMovieMeta.useMutation({\n    onSuccess: async () => {\n      await Promise.all([\n        utils.movie.getById.invalidate({ id: movieId }),\n        utils.movie.getApplicableCriteriaForMovie.invalidate({ movieId }),\n      ]);\n    }\n  });\n\n  if (movieLoading || criteriaLoading || applicableLoading) return <div>Loading...</div>;\n  if (!movie) return <div>Not found</div>;\n\n  // For each sub-criteria, calculate average score\n  const subAverages: Record<string, number> = {};\n  for (const sub of subCriteria) {\n    const subScores: number[] = [];\n    for (const evalId of evalIds) {\n      const scoresForEval = evalScores[evalId] || [];\n      const found = scoresForEval.find(s => s.criteriaId === sub.id);\n      if (found) subScores.push(found.score);\n    }\n    if (subScores.length > 0) {\n      subAverages[sub.id] = Math.round((subScores.reduce((a, b) => a + b, 0) / subScores.length) * 10) / 10;\n    }\n  }\n\n  // For each main-criteria, calculate weighted value from sub-criteria\n  const mainValues: Record<string, number> = {};\n  for (const main of mainCriteria) {\n    const subs = subCriteria.filter(sc => sc.parentId === main.id);\n    let subWeightedSum = 0;\n    let subTotalWeight = 0;\n    for (const sub of subs) {\n      if (subAverages[sub.id] !== undefined && sub.weight) {\n        subWeightedSum += (subAverages[sub.id] ?? 0) * sub.weight;\n        subTotalWeight += sub.weight;\n      }\n    }\n    if (subTotalWeight > 0) {\n      mainValues[main.id] = Math.round((subWeightedSum / subTotalWeight) * 10) / 10;\n    }\n  }\n\n  // Calculate overall weighted score\n  let weightedSum = 0;\n  let totalWeight = 0;\n  for (const main of mainCriteria) {\n    if (mainValues[main.id] !== undefined && main.weight) {\n      weightedSum += (mainValues[main.id] ?? 0) * main.weight;\n      totalWeight += main.weight;\n    }\n  }\n  const overall = totalWeight > 0 ? Math.round((weightedSum / totalWeight) * 10) / 10 : undefined;\n\n  // Add mutation for updating score\n\n  // For each sub-criteria, render stars and handle click\n  function StarInput({ value, onChange }: { value: number; onChange: (v: number) => void }) {\n    // 0.5 increments, 5 stars\n    const buttons = [] as JSX.Element[];\n    for (let i = 1; i <= 10; i++) {\n      const v = i * 0.5;\n      const active = value >= v;\n      buttons.push(\n        <button\n          key={v}\n          type=\"button\"\n          className={`transition-colors`}\n          aria-label={`${v} stars`}\n          onClick={() => onChange(v)}\n          style={{ color: active ? \"#e92932\" : \"#e7d0d1\", fontSize: 22, lineHeight: 1 }}\n        >\n          {v % 1 === 0 ? \"★\" : \"☆\"}\n        </button>\n      );\n    }\n    return <div className=\"inline-flex items-center gap-0.5\">{buttons}</div>;\n  }\n\n  return (\n    <div className=\"relative flex size-full min-h-screen flex-col group/design-root overflow-x-hidden\">\n      <div className=\"layout-container flex h-full grow flex-col\">\n        <div className=\"px-4 sm:px-8 lg:px-40 flex flex-1 justify-center py-8\">\n          <div className=\"layout-content-container flex flex-col max-w-[1200px] flex-1\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 p-4 bg-white/60 rounded-2xl border border-white/20 shadow-sm mb-4\">\n              <p className=\"text-[#1b0e0e] text-2xl font-bold leading-tight\">Edit: {movie.title}</p>\n              <div className=\"flex items-center gap-2\">\n                <input\n                  type=\"url\"\n                  placeholder=\"Poster URL\"\n                  className=\"h-9 w-64 rounded-xl border border-[#e7d0d1] bg-white/80 px-3 text-sm shadow-sm\"\n                  defaultValue={movie.posterUrl ?? \"\"}\n                  onBlur={(e) => {\n                    const val = e.currentTarget.value.trim();\n                    if (!val || val === movie.posterUrl) return;\n                    try { new URL(val); updatePoster.mutate({ id: movie.id, posterUrl: val }); } catch {}\n                  }}\n                />\n                <button\n                  className=\"h-9 rounded-xl px-3 text-sm bg-[#994d51] text-white shadow-sm hover:bg-[#7a3d41]\"\n                  onClick={() => {\n                    const title = movie.title ?? \"\";\n                    const year = String(movie.year ?? \"\");\n                    if (!title) return;\n                    fetchMovieData.mutate({ title, year });\n                  }}\n                >Fetch Poster</button>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 p-3 bg-white/70 border border-white/20 rounded-2xl shadow-sm\">\n              <h3 className=\"text-[#1b0e0e] text-base font-semibold\">Overall Score</h3>\n              <span className=\"inline-flex items-center gap-1 rounded-full bg-[#f3e7e8] px-2.5 py-1 text-sm text-[#1b0e0e]\">\n                <span>★</span>\n                <span className=\"font-semibold\">{overall ?? '-'}</span>\n              </span>\n            </div>\n            {/* Movie meta inline editor and applicable count */}\n            <div className=\"mb-4 flex flex-col gap-3 rounded-2xl border border-white/20 bg-white/60 p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-[#1b0e0e]\">Applicable criteria: <span className=\"font-semibold\">{applicable.length}</span></div>\n                <div className=\"text-xs text-[#6b4a4c]\">Edit movie meta to affect applicability</div>\n              </div>\n              <div className=\"flex flex-wrap gap-2\">\n                <input\n                  className=\"rounded-xl border border-[#e7d0d1] bg-white px-3 py-1 text-sm text-[#1b0e0e]\"\n                  placeholder=\"Type (e.g., animation, documentary)\"\n                  value={typeInput}\n                  onChange={(e) => setTypeInput(e.target.value)}\n                />\n                <input\n                  className=\"rounded-xl border border-[#e7d0d1] bg-white px-3 py-1 text-sm text-[#1b0e0e] min-w-[280px] flex-1\"\n                  placeholder=\"Genres CSV (e.g., animation,comedy)\"\n                  value={genreInput}\n                  onChange={(e) => setGenreInput(e.target.value)}\n                />\n                <button\n                  className=\"rounded-xl bg-[#994d51] px-3 py-1 text-sm text-white hover:bg-[#7a3d41]\"\n                  onClick={() => updateMeta.mutate({ id: movie.id!, type: typeInput || null, genre: genreInput || null })}\n                  disabled={updateMeta.isPending}\n                >Save</button>\n              </div>\n            </div>\n\n            {mainCriteria.sort((a, b) => (b.weight??0) - (a.weight ??0)).map(main => (\n              <div key={main.id}>\n                <div className=\"@container\">\n                  <div className=\"relative flex w-full flex-col items-start justify-between gap-3 p-4 @[480px]:flex-row @[480px]:items-center bg-white/80 backdrop-blur-sm border border-white/20 rounded-2xl shadow-sm\">\n                    <div className=\"flex w-full shrink-[3] items-center justify-between\">\n                      <h3 className=\"text-[#1b0e0e] text-lg font-bold leading-tight tracking-[-0.015em]\">{main.name}</h3>\n                      <div className=\"flex items-center gap-2\">\n                        <p className=\"text-[#1b0e0e] text-sm font-normal leading-normal @[480px]:hidden\">{mainValues[main.id] !== undefined ? mainValues[main.id] : '-'}</p>\n                        <button\n                          className=\"text-xs px-2 py-1 rounded-lg border border-[#e7d0d1] bg-white hover:bg-[#f3e7e8]\"\n                          onClick={() => {\n                            const s = new Set(openOverrides);\n                            if (s.has(main.id!)) s.delete(main.id!); else s.add(main.id!);\n                            setOpenOverrides(s);\n                          }}\n                        >\n                          {openOverrides.has(main.id!) ? 'Hide' : 'Show'} Applicability\n                        </button>\n                      </div>\n                    </div>\n                    <div className=\"flex h-4 w-full items-center gap-4\">\n                      <div className=\"flex h-2 flex-1 rounded-full bg-[#e7d0d1]\">\n                        <div className=\"h-full rounded-full bg-[#994d51]\" style={{ width: `${mainValues[main.id] !== undefined ? (mainValues[main.id] ?? 0) * 20 : 0}%` }}></div>\n                        <div className=\"relative\"><div className=\"absolute -left-2 -top-1.5 size-4 rounded-full bg-[#994d51]\"></div></div>\n                      </div>\n                      <p className=\"text-[#1b0e0e] text-sm font-normal leading-normal hidden @[480px]:block\">{mainValues[main.id] !== undefined ? mainValues[main.id] : '-'}</p>\n                    </div>\n                  </div>\n                </div>\n                {subCriteria.filter(sc => sc.parentId === main.id).map(sub => (\n                  <div className=\"@container\" key={sub.id}>\n                    <div className=\"relative flex w-full flex-col items-start justify-between gap-3 p-4 @[480px]:flex-row @[480px]:items-center\">\n                      <div className=\"flex w-full shrink-[3] items-center justify-between\">\n                        <Tooltip>\n                            <TooltipTrigger asChild>\n                              <p className=\"text-[#1b0e0e] cursor-pointer text-base font-medium leading-normal\">{sub.name}</p>\n                            </TooltipTrigger>\n                            <TooltipContent >\n                              {sub.description}\n                            </TooltipContent>\n                        </Tooltip>\n                        <div className=\"flex items-center gap-2\">\n                          <StarInput\n                            value={localSubAvg[sub.id] ?? (subAverages[sub.id] ?? 0)}\n                            onChange={(v) => {\n                              setLocalSubAvg((prev) => ({ ...prev, [sub.id!]: v }));\n                              upsertScore.mutate({ movieId: movie.id, criteriaId: sub.id, score: v });\n                            }}\n                          />\n                          <span className=\"text-[#1b0e0e] text-sm font-normal leading-normal\">{(localSubAvg[sub.id] ?? subAverages[sub.id]) ?? '-'}</span>\n                          <button\n                            onClick={() => {\n                              setConfirm({ \n                                criteriaId: sub.id,\n                              });\n                            }}\n                            className=\"ml-3 rounded-lg px-2.5 py-1.5 text-xs bg-[#f3e7e8] text-[#1b0e0e] font-medium hover:bg-[#e7d0d1] transition-colors\"\n                          >\n                            Add to Curated\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {openOverrides.has(main.id!) && (\n                  <div className=\"mt-3 p-4 bg-white/60 rounded-2xl border border-white/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"text-[#1b0e0e] text-base font-semibold\">Criteria Applicability</h4>\n                      <span className=\"text-xs text-[#6b4a4c]\">{subCriteria.filter(sc => sc.parentId === main.id).length} items</span>\n                    </div>\n                    <OverridesEditor\n                      criterias={allCriteria}\n                      applicableIds={applicableIds}\n                      movieId={movie.id}\n                      parentId={main.id!}\n                    />\n                  </div>\n                )}\n              </div>\n            ))}\n            <h3 className=\"text-[#1b0e0e] text-lg font-bold leading-tight tracking-[-0.015em] px-2 sm:px-4 pb-2 pt-4\">Notes</h3>\n            <div className=\"flex max-w-[640px] flex-wrap items-end gap-4 px-2 sm:px-4 py-3\">\n              <label className=\"flex flex-col min-w-40 flex-1\">\n                <textarea\n                  placeholder=\"Enter your notes here...\"\n                  className=\"form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-2xl text-[#1b0e0e] focus:outline-0 focus:ring-0 border border-[#e7d0d1] bg-white/80 backdrop-blur-sm focus:border-[#e7d0d1] min-h-36 placeholder:text-[#994d51] p-[15px] text-base font-normal leading-normal shadow-sm\"\n                ></textarea>\n              </label>\n            </div>\n            <div className=\"flex px-2 sm:px-4 py-3 justify-end\">\n              <button\n                className=\"flex min-w-[120px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-10 px-4 bg-[#e92932] hover:bg-[#c61f27] text-white text-sm font-bold leading-normal tracking-[0.015em] shadow-sm\"\n              >\n                <Link href=\"/\">\n                  <span className=\"truncate\">Submit Review</span>\n                </Link>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      {confirm && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40\">\n          <div className=\"w-[520px] rounded-2xl bg-white p-5 shadow-xl\">\n            <h4 className=\"text-lg font-bold mb-2\">Add to Curated</h4>\n            <p className=\"text-sm text-[#1b0e0e] mb-3\">This will add <strong>{movie.title}</strong> to the curated top list for <strong>{criteriaById[confirm.criteriaId]?.name ?? \"this category\"}</strong>.</p>\n            <div className=\"mb-3\">\n              <label className=\"block text-sm mb-1 text-[#1b0e0e]\">Optional: YouTube URL (supports watch/shorts/embed/yt.be)</label>\n              <input\n                className=\"w-full rounded-xl border border-[#e7d0d1] bg-white/80 backdrop-blur-sm px-3 py-2 text-sm shadow-sm\"\n                placeholder=\"https://www.youtube.com/watch?v=... or https://youtu.be/...\"\n                value={confirm.clipUrlInput ?? \"\"}\n                onChange={(e) => setConfirm({ ...confirm, clipUrlInput: e.target.value })}\n              />\n              {confirm.clipUrlInput ? (\n                (() => {\n                  const embed = toYouTubeEmbedUrl(confirm.clipUrlInput);\n                  return embed ? (\n                    <div className=\"mt-2\">\n                      <iframe\n                        className=\"w-full aspect-video rounded-xl shadow-sm\"\n                        src={embed}\n                        title=\"YouTube video preview\"\n                        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                        allowFullScreen\n                      />\n                    </div>\n                  ) : null;\n                })()\n              ) : null}\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <button className=\"px-3 py-2 rounded-xl bg-[#f3e7e8] hover:bg-[#e7d0d1] transition-colors\" onClick={() => setConfirm(null)}>Cancel</button>\n              <button\n                className=\"px-3 py-2 rounded-xl bg-[#e92932] hover:bg-[#c61f27] text-white shadow-sm\"\n                onClick={() => {\n                  if (!confirm) return;\n                  addToCurated.mutate({ criteriaId: confirm.criteriaId, movieId: movie.id, clipUrl: confirm.clipUrlInput });\n                  setConfirm(null);\n                }}\n              >Confirm</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\[id]\\MoviePageClient.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":29,"column":81,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":29,"endColumn":86,"fix":{"range":[1328,1329],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":30,"column":79,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":30,"endColumn":84,"fix":{"range":[1415,1416],"text":""}}],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":102,"column":23,"nodeType":"JSXOpeningElement","endLine":102,"endColumn":109,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"\"use client\";\nimport { useState } from \"react\";\nimport Link from \"next/link\";\nimport { api } from \"~/trpc/react\";\nimport MovieDetailsClient from \"./MovieDetailsClient\";\n\nfunction InfoRow({ label, value }: { label: string; value?: string | null }) {\n  if (!value) return null;\n  return (\n    <div className=\"flex gap-2 text-sm\">\n      <div className=\"text-[#6b4a4c] min-w-24\">{label}</div>\n      <div className=\"text-[#1b0e0e]\">{value}</div>\n    </div>\n  );\n}\n\nexport default function MoviePageClient({ movieId }: { movieId: string }) {\n  const [tab, setTab] = useState<\"details\" | \"edit\">(\"details\");\n  const { data: mv, isLoading } = api.movie.getById.useQuery({ id: movieId });\n  // Fetch criteria basics to compute overall for Details view\n  const { data: allCriteria = [] } = api.movie.getAllCriteria.useQuery();\n  const { data: applicable = [] } = api.movie.getApplicableCriteriaForMovie.useQuery({ movieId });\n  const { data: evaluations = [] } = api.movie.getEvaluationsByMovie.useQuery({ movieId });\n  const evalIds = evaluations.map(e => e.id);\n  const { data: scores = [] } = api.movie.getScoresByEvaluationIds.useQuery({ evalIds });\n\n  // Compute overall similar to editor\n  const applicableIds = new Set(applicable.map(c => c.id));\n  const mainCriteria = allCriteria.filter(c => !c.parentId && applicableIds.has(c.id!));\n  const subCriteria = allCriteria.filter(c => c.parentId && applicableIds.has(c.id!));\n  const evalScores: Record<string, {criteriaId: string, score: number}[]> = {};\n  scores.forEach(s => {\n    if (s.evaluationId) {\n      if (!evalScores[s.evaluationId]) evalScores[s.evaluationId] = [];\n      evalScores[s.evaluationId]?.push({ criteriaId: s.criteriaId ?? '', score: Number(s.score) });\n    }\n  });\n  const subAverages: Record<string, number> = {};\n  for (const sub of subCriteria) {\n    const subScores: number[] = [];\n    for (const evalId of evalIds) {\n      const scoresForEval = evalScores[evalId] || [];\n      const found = scoresForEval.find(s => s.criteriaId === sub.id);\n      if (found) subScores.push(found.score);\n    }\n    if (subScores.length > 0) {\n      subAverages[sub.id] = Math.round((subScores.reduce((a, b) => a + b, 0) / subScores.length) * 10) / 10;\n    }\n  }\n  const mainValues: Record<string, number> = {};\n  for (const main of mainCriteria) {\n    const subs = subCriteria.filter(sc => sc.parentId === main.id);\n    let subWeightedSum = 0;\n    let subTotalWeight = 0;\n    for (const sub of subs) {\n      if (subAverages[sub.id] !== undefined && sub.weight) {\n        subWeightedSum += (subAverages[sub.id] ?? 0) * sub.weight;\n        subTotalWeight += sub.weight;\n      }\n    }\n    if (subTotalWeight > 0) {\n      mainValues[main.id] = Math.round((subWeightedSum / subTotalWeight) * 10) / 10;\n    }\n  }\n  let weightedSum = 0;\n  let totalWeight = 0;\n  for (const main of mainCriteria) {\n    if (mainValues[main.id] !== undefined && main.weight) {\n      weightedSum += (mainValues[main.id] ?? 0) * main.weight;\n      totalWeight += main.weight;\n    }\n  }\n  const overall = totalWeight > 0 ? Math.round((weightedSum / totalWeight) * 10) / 10 : undefined;\n\n  return (\n    <div className=\"relative flex size-full min-h-screen flex-col group/design-root overflow-x-hidden\">\n      <div className=\"layout-container flex h-full grow flex-col\">\n        <div className=\"px-4 sm:px-8 lg:px-40 flex flex-1 justify-center py-8\">\n          <div className=\"layout-content-container flex flex-col max-w-[1200px] flex-1\">\n            <div className=\"flex items-center justify-between gap-4 p-4 bg-white/60 rounded-2xl border border-white/20 shadow-sm mb-4\">\n              <h1 className=\"text-[#1b0e0e] tracking-light text-[28px] font-bold leading-tight\">{mv?.title ?? \"Movie\"}</h1>\n              <div className=\"inline-flex rounded-xl border border-[#e7d0d1] bg-white p-1 shadow-sm\">\n                <button\n                  className={`px-3 py-1.5 rounded-lg text-sm font-medium ${tab === 'details' ? 'bg-[#994d51] text-white' : 'text-[#1b0e0e] hover:bg-[#f3e7e8]'}`}\n                  onClick={() => setTab(\"details\")}\n                >Details</button>\n                <button\n                  className={`px-3 py-1.5 rounded-lg text-sm font-medium ${tab === 'edit' ? 'bg-[#994d51] text-white' : 'text-[#1b0e0e] hover:bg-[#f3e7e8]'}`}\n                  onClick={() => setTab(\"edit\")}\n                >Edit</button>\n              </div>\n            </div>\n\n            {isLoading && <div className=\"text-sm text-[#1b0e0e]\">Loading...</div>}\n\n            {!isLoading && mv && tab === \"details\" && (\n              <div className=\"grid grid-cols-1 md:grid-cols-[300px_1fr] gap-6\">\n                <div className=\"rounded-2xl overflow-hidden bg-white/80 border border-white/20 shadow-sm\">\n                  <div className=\"aspect-[2/3] bg-[#f3e7e8] flex items-center justify-center\">\n                    {mv.posterUrl ? (\n                      // eslint-disable-next-line @next/next/no-img-element\n                      <img src={mv.posterUrl} alt={mv.title ?? ''} className=\"w-full h-full object-cover\" />\n                    ) : (\n                      <div className=\"text-[#6b4a4c] text-xs p-4\">No poster</div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex flex-col gap-4\">\n                  <div>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"text-2xl font-bold text-[#1b0e0e]\">\n                        {mv.title}\n                        {mv.year ? <span className=\"ml-2 text-[#6b4a4c] text-lg\">({mv.year})</span> : null}\n                      </div>\n                      {overall !== undefined ? (\n                        <span className=\"inline-flex items-center gap-1 rounded-full bg-[#f3e7e8] px-2.5 py-1 text-sm text-[#1b0e0e]\" title=\"Overall rating\">\n                          <span>★</span>\n                          <span className=\"font-semibold\">{overall.toFixed(1)}</span>\n                        </span>\n                      ) : null}\n                    </div>\n                    <div className=\"mt-2 flex flex-wrap gap-2 text-xs\">\n                      {mv.type ? <span className=\"px-2 py-1 rounded-full bg-[#f3e7e8] text-[#1b0e0e]\">{mv.type}</span> : null}\n                      {(mv.genre ?? \"\")\n                        .split(\",\")\n                        .map((g) => g.trim())\n                        .filter(Boolean)\n                        .map((g) => (\n                          <span key={g} className=\"px-2 py-1 rounded-full bg-[#e6f6ef] text-[#135c36]\">{g}</span>\n                        ))}\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 rounded-2xl border border-white/20 bg-white/60 p-4\">\n                    <InfoRow label=\"Rated\" value={mv.rated} />\n                    <InfoRow label=\"Runtime\" value={mv.runtime} />\n                    <InfoRow label=\"Released\" value={mv.released} />\n                    <InfoRow label=\"Language\" value={mv.language} />\n                    <InfoRow label=\"Country\" value={mv.country} />\n                    <InfoRow label=\"Awards\" value={mv.awards} />\n                    <InfoRow label=\"Box Office\" value={mv.boxOffice ?? undefined} />\n                    <InfoRow label=\"Website\" value={mv.website} />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 gap-3 rounded-2xl border border-white/20 bg-white/60 p-4\">\n                    <InfoRow label=\"Director\" value={mv.director} />\n                    <InfoRow label=\"Writer\" value={mv.writer} />\n                    <InfoRow label=\"Actors\" value={mv.actors} />\n                  </div>\n\n                  {mv.plot ? (\n                    <div className=\"rounded-2xl border border-white/20 bg-white/60 p-4\">\n                      <div className=\"text-sm text-[#6b4a4c] mb-1\">Plot</div>\n                      <div className=\"text-[#1b0e0e] text-sm leading-relaxed\">{mv.plot}</div>\n                    </div>\n                  ) : null}\n\n                  <div className=\"flex justify-end\">\n                    <button\n                      className=\"rounded-xl bg-[#994d51] px-3 py-2 text-sm text-white hover:bg-[#7a3d41]\"\n                      onClick={() => setTab(\"edit\")}\n                    >Edit Scores</button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {!isLoading && mv && tab === \"edit\" && (\n              <MovieDetailsClient movieId={movieId} />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\_components\\Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\admin\\criteria-defaults\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":27,"column":36,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":27,"endColumn":41,"fix":{"range":[1151,1152],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\"use client\";\nimport { useMemo, useState } from \"react\";\nimport { api } from \"~/trpc/react\";\n\nexport default function CriteriaDefaultsAdminPage() {\n  const { data: allCriteria = [] } = api.movie.getAllCriteria.useQuery();\n  const { data: rules = [], refetch } = api.movie.getCriteriaDefaultApplicability.useQuery();\n  const setRule = api.movie.setCriteriaDefaultApplicability.useMutation({\n    onSuccess: async () => {\n      await refetch();\n    },\n  });\n\n  const byCriteria = useMemo(() => new Map(rules.map((r) => [r.criteriaId, r])), [rules]);\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4 text-[#1b0e0e]\">Criteria Default Applicability</h1>\n      <p className=\"text-sm text-[#6b4a4c] mb-4\">Set defaults per criterion. These are applied before per-movie overrides. Leave fields empty to not constrain by that dimension.</p>\n      <div className=\"space-y-3\">\n        {allCriteria\n          .filter((c) => !!c.parentId) // focus on leaf/sub criteria\n          .map((c) => (\n            <CriteriaRuleRow\n              key={c.id}\n              criterion={c}\n              rule={byCriteria.get(c.id!)}\n              onSave={(payload) => setRule.mutate(payload)}\n            />\n          ))}\n      </div>\n    </div>\n  );\n}\n\ntype RulePayload = {\n  criteriaId: string;\n  defaultMode?: \"include\" | \"exclude\";\n  includeTypesCsv?: string;\n  excludeTypesCsv?: string;\n  includeGenresCsv?: string;\n  excludeGenresCsv?: string;\n};\n\nfunction CriteriaRuleRow({\n  criterion,\n  rule,\n  onSave,\n}: {\n  criterion: { id?: string | null; name?: string | null };\n  rule: { defaultMode: string | null; includeTypesCsv: string | null; excludeTypesCsv: string | null; includeGenresCsv: string | null; excludeGenresCsv: string | null } | undefined;\n  onSave: (payload: RulePayload) => void;\n}) {\n  const [state, setState] = useState({\n    defaultMode: (rule?.defaultMode as \"include\" | \"exclude\" | null) ?? null,\n    includeTypesCsv: rule?.includeTypesCsv ?? \"\",\n    excludeTypesCsv: rule?.excludeTypesCsv ?? \"\",\n    includeGenresCsv: rule?.includeGenresCsv ?? \"\",\n    excludeGenresCsv: rule?.excludeGenresCsv ?? \"\",\n  });\n\n  const id = criterion.id!;\n\n  return (\n    <div className=\"border border-[#e7d0d1] rounded-xl p-3 bg-white/80\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div>\n          <div className=\"text-sm font-semibold text-[#1b0e0e]\">{criterion.name}</div>\n        </div>\n        <div className=\"flex items-center gap-2 text-xs\">\n          <label className=\"flex items-center gap-1\">\n            <input\n              type=\"radio\"\n              name={`mode-${id}`}\n              checked={state.defaultMode === null}\n              onChange={() => setState((s) => ({ ...s, defaultMode: null }))}\n            />\n            Inherit (include)\n          </label>\n          <label className=\"flex items-center gap-1\">\n            <input\n              type=\"radio\"\n              name={`mode-${id}`}\n              checked={state.defaultMode === \"include\"}\n              onChange={() => setState((s) => ({ ...s, defaultMode: \"include\" }))}\n            />\n            Include\n          </label>\n          <label className=\"flex items-center gap-1\">\n            <input\n              type=\"radio\"\n              name={`mode-${id}`}\n              checked={state.defaultMode === \"exclude\"}\n              onChange={() => setState((s) => ({ ...s, defaultMode: \"exclude\" }))}\n            />\n            Exclude\n          </label>\n        </div>\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-xs\">\n        <input\n          className=\"rounded-lg border border-[#e7d0d1] px-2 py-1 bg-white\"\n          placeholder=\"Include types (csv): animation,documentary\"\n          value={state.includeTypesCsv}\n          onChange={(e) => setState((s) => ({ ...s, includeTypesCsv: e.target.value }))}\n        />\n        <input\n          className=\"rounded-lg border border-[#e7d0d1] px-2 py-1 bg-white\"\n          placeholder=\"Exclude types (csv)\"\n          value={state.excludeTypesCsv}\n          onChange={(e) => setState((s) => ({ ...s, excludeTypesCsv: e.target.value }))}\n        />\n        <input\n          className=\"rounded-lg border border-[#e7d0d1] px-2 py-1 bg-white\"\n          placeholder=\"Include genres (csv): animation,comedy\"\n          value={state.includeGenresCsv}\n          onChange={(e) => setState((s) => ({ ...s, includeGenresCsv: e.target.value }))}\n        />\n        <input\n          className=\"rounded-lg border border-[#e7d0d1] px-2 py-1 bg-white\"\n          placeholder=\"Exclude genres (csv)\"\n          value={state.excludeGenresCsv}\n          onChange={(e) => setState((s) => ({ ...s, excludeGenresCsv: e.target.value }))}\n        />\n      </div>\n      <div className=\"mt-2 flex justify-end\">\n        <button\n          className=\"px-3 py-1.5 rounded-lg bg-[#994d51] hover:bg-[#7a3d41] text-white text-xs\"\n          onClick={() =>\n            onSave({\n              criteriaId: id,\n              defaultMode: state.defaultMode ?? undefined,\n              includeTypesCsv: state.includeTypesCsv || undefined,\n              excludeTypesCsv: state.excludeTypesCsv || undefined,\n              includeGenresCsv: state.includeGenresCsv || undefined,\n              excludeGenresCsv: state.excludeGenresCsv || undefined,\n            })\n          }\n        >Save</button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\api\\trpc\\[trpc]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\api\\video-proxy\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\best-of\\_components\\BestOfCarousels.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":283,"column":38,"nodeType":"JSXOpeningElement","endLine":283,"endColumn":118},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":308,"column":21,"nodeType":"JSXOpeningElement","endLine":308,"endColumn":113}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { api } from \"~/trpc/react\";\nimport { HorizontalCarousel, type CarouselItem } from \"~/app/best-of/_components/HorizontalCarousel\";\n\nexport type ItemsByKey = Record<string, CarouselItem[]>;\n\nexport function BestOfCarousels({\n  itemsByCurated,\n  criteriaLabels,\n  itemsByGenre,\n  itemsByYear,\n  itemsByRated,\n  itemsByCountry,\n  topN,\n}: {\n  itemsByCurated: ItemsByKey;\n  criteriaLabels: Record<string, string>;\n  itemsByGenre: ItemsByKey;\n  itemsByYear: ItemsByKey;\n  itemsByRated: ItemsByKey;\n  itemsByCountry: ItemsByKey;\n  topN: number;\n}) {\n  const [visible, setVisible] = useState({\n    curated: true,\n    genre: true,\n    year: false,\n    rated: false,\n    country: false,\n  });\n\n  // Local editable copy for curated only\n  const [curatedLocal, setCuratedLocal] = useState<ItemsByKey>({});\n  const [editCurated, setEditCurated] = useState(false);\n  const [picker, setPicker] = useState<\n    | { open: false }\n    | { open: true; mode: \"replace\" | \"add\"; criteriaId: string; oldMovieId?: string; input: string }\n  >({ open: false });\n  const [pickerError, setPickerError] = useState<string | null>(null);\n  const [toast, setToast] = useState<{ id: number; type: 'success' | 'error'; message: string } | null>(null);\n  const showToast = (type: 'success' | 'error', message: string) => {\n    const id = Date.now();\n    setToast({ id, type, message });\n    window.setTimeout(() => {\n      setToast((t) => (t && t.id === id ? null : t));\n    }, 2000);\n  };\n\n  // tRPC utils and mutations\n  const utils = api.useUtils();\n  const reorderMut = api.movie.reorderBestOfList.useMutation({\n    onSuccess: async () => {\n      await utils.movie.getBestOfForAll.invalidate().catch(() => {});\n      showToast('success', 'Order saved');\n    },\n    onError: (e) => {\n      console.error(e);\n      showToast('error', 'Reorder failed');\n    }\n  });\n  const replaceMut = api.movie.replaceInBestOfList.useMutation({\n    onSuccess: async () => {\n      await utils.movie.getBestOfForAll.invalidate().catch(() => {});\n      showToast('success', 'Replaced');\n    },\n    onError: (e) => {\n      setPickerError(e.message ?? \"Replace failed\");\n      showToast('error', 'Replace failed');\n    }\n  });\n  const addMut = api.movie.addToBestOfList.useMutation({\n    onSuccess: async () => {\n      await utils.movie.getBestOfForAll.invalidate().catch(() => {});\n      showToast('success', 'Added');\n    },\n    onError: (e) => {\n      setPickerError(e.message ?? \"Add failed\");\n      showToast('error', 'Add failed');\n    }\n  });\n\n  // Movie preview for picker (unconditionally declared hook)\n  const pickerOpen = picker.open;\n  const pickerInput = pickerOpen ? picker.input : \"\";\n  const { data: previewMovie, isFetching: previewLoading } = api.movie.getById.useQuery(\n    { id: pickerInput || \"\" },\n    { enabled: pickerOpen && !!pickerInput }\n  );\n  // Debounced search for picker\n  const [search, setSearch] = useState(\"\");\n  const [debounced, setDebounced] = useState(\"\");\n  useEffect(() => {\n    const h = window.setTimeout(() => setDebounced(search.trim()), 300);\n    return () => window.clearTimeout(h);\n  }, [search]);\n  const { data: searchResults = [], isFetching: searchLoading } = api.movie.searchMovies.useQuery(\n    { q: debounced, limit: 8 },\n    { enabled: pickerOpen && debounced.length > 0 }\n  );\n\n  useEffect(() => {\n    setCuratedLocal(itemsByCurated);\n  }, [itemsByCurated]);\n\n  const toggle = (key: keyof typeof visible) =>\n    setVisible((v) => ({ ...v, [key]: !v[key] }));\n\n  const pill = (key: keyof typeof visible, label: string) => (\n    <button\n      key={key}\n      type=\"button\"\n      onClick={() => toggle(key)}\n      className={`${\n        visible[key]\n          ? \"bg-[#994d51] text-white\"\n          : \"bg-white/80 text-[#6b4a4c] hover:bg-[#f3e7e8]\"\n      } border border-[#e7d0d1] rounded-full px-3 py-1 text-sm transition-colors`}\n    >\n      {label}\n    </button>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap gap-2 px-2 sm:px-4\">\n        {pill(\"curated\", \"Curated\")}\n        {pill(\"genre\", \"Genres\")}\n        {pill(\"year\", \"Years\")}\n        {pill(\"rated\", \"Age Ratings\")}\n        {pill(\"country\", \"Countries\")}\n        {visible.curated && (\n          <button\n            type=\"button\"\n            onClick={() => setEditCurated((e) => !e)}\n            className={`${editCurated ? \"bg-[#994d51] text-white\" : \"bg-white/80 text-[#6b4a4c] hover:bg-[#f3e7e8]\"} border border-[#e7d0d1] rounded-full px-3 py-1 text-sm transition-colors ml-auto`}\n          >\n            {editCurated ? \"Done\" : \"Edit\"}\n          </button>\n        )}\n      </div>\n\n      <div className=\"px-2 sm:px-4\">\n        {visible.curated &&\n          Object.entries(curatedLocal)\n            .sort((a, b) => (criteriaLabels[a[0]] ?? a[0]).localeCompare(criteriaLabels[b[0]] ?? b[0]))\n            .map(([criteria, arr]) => {\n              const items = arr.slice(0, topN);\n              const move = (id: string, dir: -1 | 1) => {\n                setCuratedLocal((prev) => {\n                  const next = { ...prev };\n                  const list = [...(next[criteria] ?? [])];\n                  const idx = list.findIndex((x) => x.id === id);\n                  if (idx < 0) return prev;\n                  const j = idx + dir;\n                  if (j < 0 || j >= list.length) return prev;\n                  const tmp = list[idx]!;\n                  list[idx] = list[j]!;\n                  list[j] = tmp;\n                  next[criteria] = list;\n                  // Persist new order (optimistic)\n                  const orderedMovieIds = list.map((x) => x.id).slice(0, topN);\n                  reorderMut.mutate({ criteriaId: criteria, orderedMovieIds });\n                  return next;\n                });\n              };\n              const openReplace = (id: string) => {\n                setPickerError(null);\n                setPicker({ open: true, mode: \"replace\", criteriaId: criteria, oldMovieId: id, input: \"\" });\n              };\n              const openAdd = () => {\n                setPickerError(null);\n                setPicker({ open: true, mode: \"add\", criteriaId: criteria, input: \"\" });\n              };\n              const onReorder = (orderedIds: string[]) => {\n                setCuratedLocal((prev) => {\n                  const next = { ...prev };\n                  const list = [...(next[criteria] ?? [])];\n                  // reorder locally by mapping ids\n                  const map = new Map(list.map((x) => [x.id, x] as const));\n                  next[criteria] = orderedIds.map((id) => map.get(id)).filter(Boolean) as CarouselItem[];\n                  return next;\n                });\n                reorderMut.mutate({ criteriaId: criteria, orderedMovieIds: orderedIds.slice(0, topN) });\n              };\n              return (\n                <div key={`curated-wrap-${criteria}`} className=\"mb-3\">\n                  {editCurated && items.length < topN ? (\n                    <div className=\"flex justify-end mb-1\">\n                      <button\n                        className=\"rounded-full px-3 py-1 text-xs border border-[#e7d0d1] bg-white/80 text-[#6b4a4c] hover:bg-[#f3e7e8]\"\n                        onClick={openAdd}\n                      >Add</button>\n                    </div>\n                  ) : null}\n                  <HorizontalCarousel\n                    key={`curated-${criteria}`}\n                    label={`${criteriaLabels[criteria] ?? criteria}`}\n                    items={items}\n                    editMode={editCurated}\n                    onMoveUp={(id) => move(id, -1)}\n                    onMoveDown={(id) => move(id, +1)}\n                    onReplace={(id) => openReplace(id)}\n                    onReorder={onReorder}\n                  />\n                </div>\n              );\n            })}\n\n        {visible.genre &&\n          Object.entries(itemsByGenre)\n            .sort((a, b) => a[0].localeCompare(b[0]))\n            .map(([genre, arr]) => (\n              <HorizontalCarousel\n                key={`genre-${genre}`}\n                label={`Top ${Math.min(topN, arr.length)} in ${genre}`}\n                items={arr.slice(0, topN)}\n              />\n            ))}\n\n        {visible.year &&\n          Object.entries(itemsByYear)\n            .sort((a, b) => Number(b[0]) - Number(a[0]))\n            .map(([year, arr]) => (\n              <HorizontalCarousel\n                key={`year-${year}`}\n                label={`Top ${Math.min(topN, arr.length)} in ${year}`}\n                items={arr.slice(0, topN)}\n              />\n            ))}\n\n        {visible.rated &&\n          Object.entries(itemsByRated)\n            .sort((a, b) => a[0].localeCompare(b[0]))\n            .map(([rated, arr]) => (\n              <HorizontalCarousel\n                key={`rated-${rated}`}\n                label={`Top ${Math.min(topN, arr.length)} rated ${rated}`}\n                items={arr.slice(0, topN)}\n              />\n            ))}\n\n        {visible.country &&\n          Object.entries(itemsByCountry)\n            .sort((a, b) => a[0].localeCompare(b[0]))\n            .map(([country, arr]) => (\n              <HorizontalCarousel\n                key={`country-${country}`}\n                label={`Top ${Math.min(topN, arr.length)} in ${country}`}\n                items={arr.slice(0, topN)}\n              />\n            ))}\n      </div>\n      {picker.open ? (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40\">\n        <div className=\"w-[520px] rounded-2xl bg-white p-5 shadow-xl\">\n          <h4 className=\"text-lg font-bold mb-2\">{picker.mode === 'replace' ? 'Replace Movie' : 'Add Movie'}</h4>\n          <p className=\"text-sm text-[#1b0e0e] mb-3\">Search or enter a movie ID to {picker.mode === 'replace' ? 'replace the current one' : 'add to the list'}.</p>\n          <div className=\"grid grid-cols-1 gap-2 mb-2\">\n            <input\n              className=\"w-full rounded-xl border border-[#e7d0d1] bg-white/80 backdrop-blur-sm px-3 py-2 text-sm shadow-sm\"\n              placeholder=\"Search by title...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n            {search ? (\n              <div className=\"max-h-48 overflow-y-auto border border-[#e7d0d1] rounded-xl\">\n                {searchLoading ? (\n                  <div className=\"p-2 text-xs text-[#6b4a4c]\">Searching…</div>\n                ) : searchResults.length === 0 ? (\n                  <div className=\"p-2 text-xs text-[#6b4a4c]\">No results</div>\n                ) : (\n                  searchResults.map((m) => (\n                    <button\n                      key={m.id}\n                      className=\"w-full flex items-center gap-3 p-2 text-left hover:bg-[#f3e7e8]\"\n                      onClick={() => {\n                        setPicker({ ...picker, input: m.id });\n                        setSearch(\"\");\n                      }}\n                    >\n                      {m.posterUrl ? <img src={m.posterUrl} alt=\"poster\" className=\"w-8 h-12 object-cover rounded\" /> : <div className=\"w-8 h-12 bg-[#f3e7e8] rounded\" />}\n                      <div className=\"text-xs text-[#1b0e0e]\">\n                        <div className=\"font-medium\">{m.title ?? m.id}</div>\n                        {m.year ? <div>{m.year}</div> : null}\n                      </div>\n                    </button>\n                  ))\n                )}\n              </div>\n            ) : null}\n          </div>\n          <input\n            className=\"w-full rounded-xl border border-[#e7d0d1] bg-white/80 backdrop-blur-sm px-3 py-2 text-sm shadow-sm\"\n            placeholder=\"movie-id\"\n            value={picker.input}\n            onChange={(e) => picker.open && setPicker({ ...picker, input: e.target.value })}\n          />\n          {/* Preview */}\n          {picker.input ? (\n            <div className=\"mt-2 flex items-center gap-3\">\n              {previewLoading ? (\n                <span className=\"text-xs text-[#6b4a4c]\">Loading preview…</span>\n              ) : previewMovie ? (\n                <>\n                  {previewMovie.posterUrl ? (\n                    <img src={previewMovie.posterUrl} alt=\"poster\" className=\"w-10 h-14 object-cover rounded\" />\n                  ) : null}\n                  <div className=\"text-xs text-[#1b0e0e]\">\n                    <div className=\"font-medium\">{previewMovie.title ?? previewMovie.id}</div>\n                    {previewMovie.year ? <div>{previewMovie.year}</div> : null}\n                  </div>\n                </>\n              ) : (\n                <span className=\"text-xs text-[#994d51]\">No movie found for that ID</span>\n              )}\n            </div>\n          ) : null}\n          {pickerError ? (\n            <div className=\"mt-2 text-xs text-[#994d51]\">{pickerError}</div>\n          ) : null}\n          <div className=\"flex justify-end gap-2 mt-3\">\n            <button className=\"px-3 py-2 rounded-xl bg-[#f3e7e8] hover:bg-[#e7d0d1] transition-colors\" onClick={() => setPicker({ open: false })}>Cancel</button>\n            <button\n              className=\"px-3 py-2 rounded-xl bg-[#e92932] hover:bg-[#c61f27] text-white shadow-sm\"\n              disabled={(() => {\n                if (!picker.open) return true;\n                const mId = picker.input.trim();\n                if (!mId) return true;\n                // Must exist for both modes\n                if (!previewMovie) return true;\n                // Add: disallow duplicate or overflow\n                if (picker.mode === 'add') {\n                  const list = curatedLocal[picker.criteriaId] ?? [];\n                  if (list.length >= topN) return true;\n                  if (list.some(x => x.id === mId)) return true;\n                }\n                // Replace: disallow no-op\n                if (picker.mode === 'replace' && picker.oldMovieId === mId) return true;\n                return false;\n              })()}\n              onClick={() => {\n                if (!picker.open || !picker.input.trim()) return;\n                const movieId = picker.input.trim();\n                if (picker.mode === 'replace' && picker.oldMovieId) {\n                  // optimistic replace in local state\n                  setCuratedLocal((prev) => {\n                    const next = { ...prev };\n                    const list = [...(next[picker.criteriaId] ?? [])];\n                    const idx = list.findIndex((x) => x.id === picker.oldMovieId);\n                    if (idx < 0) return prev;\n                    list[idx] = { id: movieId, title: previewMovie?.title ?? movieId, href: `/${movieId}`, posterUrl: previewMovie?.posterUrl ?? undefined };\n                    next[picker.criteriaId] = list;\n                    return next;\n                  });\n                  replaceMut.mutate({ criteriaId: picker.criteriaId, oldMovieId: picker.oldMovieId, newMovieId: movieId });\n                } else if (picker.mode === 'add') {\n                  // optimistic add to end if room\n                  setCuratedLocal((prev) => {\n                    const next = { ...prev };\n                    const list = [...(next[picker.criteriaId] ?? [])];\n                    if (list.length >= topN) return prev;\n                    list.push({ id: movieId, title: previewMovie?.title ?? movieId, href: `/${movieId}`, posterUrl: previewMovie?.posterUrl ?? undefined });\n                    next[picker.criteriaId] = list;\n                    return next;\n                  });\n                  addMut.mutate({ criteriaId: picker.criteriaId, movieId });\n                }\n                setPicker({ open: false });\n              }}\n            >Confirm</button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n    {toast ? (\n      <div className={`fixed bottom-4 right-4 z-50 rounded-xl px-3 py-2 text-sm shadow-lg ${toast.type === 'success' ? 'bg-green-600 text-white' : 'bg-[#994d51] text-white'}`}>\n        {toast.message}\n      </div>\n    ) : null}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\best-of\\_components\\HorizontalCarousel.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":80,"column":21,"nodeType":"JSXOpeningElement","endLine":84,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\best-of\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toYouTubeEmbedUrl' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentView' is assigned a value but never used.","line":75,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":191,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":191,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":191,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":192,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":192,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .position on an `any` value.","line":192,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":38}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { db } from \"~/server/db\";\nimport { bestOf, criteria, evaluation, evaluationScore, movie } from \"~/server/db/schema\";\nimport Link from \"next/link\";\nimport { toYouTubeEmbedUrl } from \"~/lib/utils\";\nimport { BestOfCarousels } from \"~/app/best-of/_components/BestOfCarousels\";\n\nexport default async function BestOfPage({searchParams}: {searchParams: Promise<{view: string}>}) {\n  const all = await db.select().from(bestOf);\n  const allCriteria = await db.select().from(criteria);\n  const allMovies = await db.select().from(movie);\n  const evaluations = await db.select().from(evaluation);\n  const scores = await db.select().from(evaluationScore);\n\n  const mainCriteria = allCriteria.filter(c => !c.parentId);\n  const subCriteria = allCriteria.filter(c => c.parentId);\n\n\n  const evalScores: Record<string, {criteriaId: string, score: number}[]> = {};\n  scores.forEach(s => {\n    if (s.evaluationId) {\n      if (!evalScores[s.evaluationId]) evalScores[s.evaluationId] = [];\n      evalScores[s.evaluationId]?.push({ criteriaId: s.criteriaId ?? '', score: Number(s.score) });\n    }\n  });\n\n  const movieEvaluations: Record<string, string[]> = {};\n  evaluations.forEach(ev => {\n    if (ev.movieId) {\n      if (!movieEvaluations[ev.movieId]) movieEvaluations[ev.movieId] = [];\n      movieEvaluations[ev.movieId]?.push(ev.id);\n    }\n  });\n  // Weighted score per movie (0-5)\n  const movieScores: Record<string, number> = {};\n  for (const movie of allMovies) {\n    const evalIds = movieEvaluations[movie.id] || [];\n    // For each main criteria, calculate weighted score\n    let weightedSum = 0;\n    let totalWeight = 0;\n    for (const main of mainCriteria) {\n      // Find all sub-criteria for this main\n      const subs = subCriteria.filter(sc => sc.parentId === main.id);\n      // For each sub-criteria, gather all scores for this movie\n      let subWeightedSum = 0;\n      let subTotalWeight = 0;\n      for (const sub of subs) {\n        const subScores: number[] = [];\n        for (const evalId of evalIds) {\n          const scoresForEval = evalScores[evalId] || [];\n          const found = scoresForEval.find(s => s.criteriaId === sub.id);\n          if (found) subScores.push(found.score);\n        }\n        if (subScores.length > 0 && sub.weight) {\n          const avg = subScores.reduce((a, b) => a + b, 0) / subScores.length;\n          subWeightedSum += avg * sub.weight;\n          subTotalWeight += sub.weight;\n        }\n      }\n      // Main-criteria value is weighted sum of sub-criteria\n      if (subTotalWeight > 0 && main.weight) {\n        const mainValue = subWeightedSum / subTotalWeight;\n        weightedSum += mainValue * main.weight;\n        totalWeight += main.weight;\n      }\n    }\n    if (totalWeight > 0) {\n      movieScores[movie.id] = weightedSum / totalWeight;\n    }\n  }\n\n  const criteriaById = Object.fromEntries(allCriteria.map(c => [c.id, c] as const));\n  const movieById = Object.fromEntries(allMovies.map(m => [m.id, m] as const));\n\n  const viewSearch = (await searchParams).view;\n  const currentView = (viewSearch === 'gallery' || viewSearch === 'detailed') ? viewSearch : 'gallery';\n  \n  // Helper to build top groups for different categories\n  function buildTopGroups(getKey: (m: typeof allMovies[number]) => string | undefined) {\n    const groups: Record<string, { movieId: string; score: number }[]> = {};\n    for (const m of allMovies) {\n      const key = getKey(m) ?? 'Unknown';\n      const score = movieScores[m.id];\n      if (score == null) continue;\n      if (!groups[key]) groups[key] = [];\n      groups[key].push({ movieId: m.id, score });\n    }\n    Object.keys(groups).forEach((k) => groups[k]?.sort((a, b) => b.score - a.score));\n    return groups;\n  }\n\n  // Helper to build top groups when a movie can belong to multiple keys (e.g., multiple genres)\n  function buildTopGroupsMulti(getKeys: (m: typeof allMovies[number]) => string[] | undefined) {\n    const groups: Record<string, { movieId: string; score: number }[]> = {};\n    for (const m of allMovies) {\n      const keys = getKeys(m)?.filter(Boolean) ?? ['Unknown'];\n      const score = movieScores[m.id];\n      if (score == null) continue;\n      for (const key of keys) {\n        if (!groups[key]) groups[key] = [];\n        groups[key].push({ movieId: m.id, score });\n      }\n    }\n    Object.keys(groups).forEach((k) => groups[k]?.sort((a, b) => b.score - a.score));\n    return groups;\n  }\n\n  const TOP_N = 10;\n  const byGenre = buildTopGroupsMulti((m) => m.genre ? m.genre.split(',').map((g) => g.trim()) : undefined);\n  const byYear = buildTopGroups((m) => (m.year ? String(m.year) : undefined));\n  const byRated = buildTopGroups((m) => m.rated ?? undefined);\n  const byCountry = buildTopGroups((m) => (m.country ? m.country.split(',')[0]?.trim() : undefined));\n\n  // Build UI-ready items for the client component\n  const itemsByGenre = Object.fromEntries(\n    Object.entries(byGenre).map(([genre, arr]) => [\n      genre,\n      arr.map(({ movieId, score }) => {\n        const m = movieById[movieId];\n        return {\n          id: movieId,\n          title: m?.title ?? 'Unknown',\n          posterUrl: m?.posterUrl,\n          href: `/${movieId}`,\n          subtitle: `${genre} • Score ${score.toFixed(2)}`,\n        };\n      }),\n    ])\n  );\n\n  const itemsByYear = Object.fromEntries(\n    Object.entries(byYear).map(([year, arr]) => [\n      year,\n      arr.map(({ movieId, score }) => {\n        const m = movieById[movieId];\n        return {\n          id: movieId,\n          title: m?.title ?? 'Unknown',\n          posterUrl: m?.posterUrl,\n          href: `/${movieId}`,\n          subtitle: `Year ${year} • Score ${score.toFixed(2)}`,\n        };\n      }),\n    ])\n  );\n\n  const itemsByRated = Object.fromEntries(\n    Object.entries(byRated).map(([rated, arr]) => [\n      rated,\n      arr.map(({ movieId, score }) => {\n        const m = movieById[movieId];\n        return {\n          id: movieId,\n          title: m?.title ?? 'Unknown',\n          posterUrl: m?.posterUrl,\n          href: `/${movieId}`,\n          subtitle: `${rated} • Score ${score.toFixed(2)}`,\n        };\n      }),\n    ])\n  );\n\n  const itemsByCountry = Object.fromEntries(\n    Object.entries(byCountry).map(([country, arr]) => [\n      country,\n      arr.map(({ movieId, score }) => {\n        const m = movieById[movieId];\n        return {\n          id: movieId,\n          title: m?.title ?? 'Unknown',\n          posterUrl: m?.posterUrl,\n          href: `/${movieId}`,\n          subtitle: `${country} • Score ${score.toFixed(2)}`,\n        };\n      }),\n    ])\n  );\n\n  // Curated best-of (manual picks) grouped by criteriaId and labeled by criteria name\n  const rawCuratedByCriteriaId = all.reduce<Record<string, { id: string; title: string; posterUrl?: string | null; href: string; subtitle?: string; createdAt?: Date | null; position?: number | null }[]>>(\n    (acc, b) => {\n      const cid = b.criteriaId ?? undefined;\n      const m = b.movieId ? movieById[b.movieId] : undefined;\n      if (!cid || !m) return acc;\n      if (!acc[cid]) acc[cid] = [];\n      acc[cid].push({\n        id: m.id,\n        title: m.title ?? 'Unknown',\n        posterUrl: m.posterUrl,\n        href: `/${m.id}`,\n        subtitle: undefined,\n        createdAt: (b as any).createdAt ?? undefined,\n        position: (b as any).position ?? null,\n      });\n      return acc;\n    },\n    {}\n  );\n\n  // Sort curated within each criteria by position asc (nulls last), then createdAt desc; keep top N and add ordinal subtitle\n  const itemsByCurated = Object.fromEntries(\n    Object.entries(rawCuratedByCriteriaId).map(([criteriaId, arr]) => {\n      const sorted = [...arr].sort((a, b) => {\n        const pa = a.position ?? Number.MAX_SAFE_INTEGER;\n        const pb = b.position ?? Number.MAX_SAFE_INTEGER;\n        if (pa !== pb) return pa - pb;\n        const da = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n        const dbt = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n        return dbt - da;\n      });\n      const limited = sorted.slice(0, TOP_N);\n      return [\n        criteriaId,\n        limited.map((item, idx) => ({\n          id: item.id,\n          title: item.title,\n          posterUrl: item.posterUrl,\n          href: item.href,\n          subtitle: `#${idx + 1}`,\n        })),\n      ] as const;\n    })\n  );\n\n  const criteriaLabels: Record<string, string> = Object.fromEntries(\n    Object.entries(rawCuratedByCriteriaId).map(([criteriaId]) => [criteriaId, criteriaById[criteriaId]?.name ?? 'Unknown Criteria'])\n  );\n\n\n\n  return (\n    <div className=\"relative flex size-full min-h-screen flex-col bg-gradient-to-br from-[#fcf8f8] via-[#f9f2f3] to-[#f5e8e9] group/design-root overflow-x-hidden\" style={{ fontFamily: '\"Plus Jakarta Sans\", \"Noto Sans\", sans-serif' }}>\n      <div className=\"layout-container flex h-full grow flex-col\">\n        <div className=\"px-4 sm:px-8 lg:px-40 flex flex-1 justify-center py-8\">\n          <div className=\"layout-content-container flex flex-col max-w-[1200px] flex-1\">\n            <div className=\"flex items-center justify-between gap-4 px-2 sm:px-4 py-3\">\n              <h1 className=\"text-[#1b0e0e] tracking-light text-[28px] font-bold leading-tight\">Best Of</h1>\n              <Link href=\"/best/people\" className=\"rounded-xl bg-[#994d51] px-3 py-2 text-sm text-white hover:bg-[#7a3d41] shadow-sm\">Explore Best People</Link>\n            </div>\n\n              <div className=\"px-2 sm:px-4 py-4\">\n                <BestOfCarousels\n                  itemsByCurated={itemsByCurated}\n                  criteriaLabels={criteriaLabels}\n                  itemsByGenre={itemsByGenre}\n                  itemsByYear={itemsByYear}\n                  itemsByRated={itemsByRated}\n                  itemsByCountry={itemsByCountry}\n                  topN={TOP_N}\n                />\n              </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\best\\people\\PeopleBestClient.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":110,"column":57,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":110,"endColumn":68,"fix":{"range":[5239,5249],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":126,"column":58,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":126,"endColumn":70,"fix":{"range":[6024,6035],"text":""}}],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":159,"column":25,"nodeType":"JSXOpeningElement","endLine":159,"endColumn":152,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"\"use client\";\nimport { useMemo, useState } from \"react\";\nimport Link from \"next/link\";\nimport { api } from \"~/trpc/react\";\n\nconst ACTING_PERFORMANCE_CRITERIA_ID = \"2055d1c8-87e6-459f-860d-aae443b8a297\";\n\ntype Role = \"actor\" | \"writer\" | \"director\";\n\ntype SortBy = \"avg\" | \"count\";\n\ntype SortDir = \"asc\" | \"desc\";\n\nexport default function PeopleBestClient() {\n  const [role, setRole] = useState<Role>(\"actor\");\n  const [minMovies, setMinMovies] = useState<number | undefined>(undefined);\n  const [page, setPage] = useState<number>(1);\n  const [pageSize, setPageSize] = useState<number | undefined>(undefined);\n  const [sortBy, setSortBy] = useState<SortBy | undefined>(undefined);\n  const [sortDir, setSortDir] = useState<SortDir | undefined>(undefined);\n\n  const params = useMemo(() => ({\n    role,\n    page,\n    ...(pageSize !== undefined ? { pageSize } : {}),\n    ...(minMovies !== undefined ? { minMovies } : {}),\n    ...(sortBy !== undefined ? { sortBy } : {}),\n    ...(sortDir !== undefined ? { sortDir } : {}),\n    actorCriteriaId: role === \"actor\" ? ACTING_PERFORMANCE_CRITERIA_ID : undefined,\n  }), [role, page, pageSize, minMovies, sortBy, sortDir]);\n\n  const { data, isLoading, refetch, isFetching } = api.movie.getTopPeopleByRole.useQuery(params);\n\n  const total = data?.total ?? 0;\n  const effectivePageSize = data?.pageSize ?? pageSize ?? 20;\n  const totalPages = Math.max(1, Math.ceil(total / effectivePageSize));\n\n  // Reset to page 1 when role or filters change\n  function updateRole(r: Role) {\n    setRole(r);\n    setPage(1);\n  }\n\n  function applyFilters() {\n    setPage(1);\n    refetch().catch(() => {});\n  }\n\n  return (\n    <div className=\"relative flex size-full min-h-screen flex-col bg-gradient-to-br from-[#fcf8f8] via-[#f9f2f3] to-[#f5e8e9] group/design-root overflow-x-hidden\" style={{ fontFamily: '\"Plus Jakarta Sans\", \"Noto Sans\", sans-serif' }}>\n      <div className=\"layout-container flex h-full grow flex-col\">\n        <div className=\"px-4 sm:px-8 lg:px-40 flex flex-1 justify-center py-8\">\n          <div className=\"layout-content-container flex flex-col max-w-[1200px] flex-1 gap-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-6\">\n              <h1 className=\"text-[#1b0e0e] tracking-light text-[32px] font-bold leading-tight\">Best People</h1>\n              <div className=\"inline-flex rounded-xl border border-[#e7d0d1] bg-white/80 p-1 shadow-sm\">\n                {([\"actor\", \"writer\", \"director\"] as Role[]).map((r) => (\n                  <button\n                    key={r}\n                    className={`px-3 py-1.5 rounded-lg text-sm font-medium ${role === r ? 'bg-[#994d51] text-white' : 'text-[#1b0e0e] hover:bg-[#f3e7e8]'}`}\n                    onClick={() => updateRole(r)}\n                  >{r.charAt(0).toUpperCase() + r.slice(1)}s</button>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex flex-col gap-3 rounded-2xl border border-white/20 bg-white/60 p-4\">\n              <div className=\"flex flex-wrap items-end gap-3\">\n                <label className=\"flex flex-col\">\n                  <span className=\"text-xs text-[#6b4a4c]\">Min movies</span>\n                  <div className=\"flex items-center gap-2\">\n                    <select\n                      className=\"rounded-xl border border-[#e7d0d1] bg-white px-3 py-1 text-sm text-[#1b0e0e]\"\n                      value={minMovies === undefined ? \"\" : String(minMovies)}\n                      onChange={(e) => {\n                        const v = e.target.value;\n                        setMinMovies(v === \"\" ? undefined : Math.max(1, Number(v) || 1));\n                        setPage(1);\n                      }}\n                    >\n                      <option value=\"\">Default</option>\n                      {[1,2,3,4,5,6,7,8,9,10].map(n => <option key={n} value={n}>{n}</option>)}\n                    </select>\n                  </div>\n                </label>\n                <label className=\"flex flex-col\">\n                  <span className=\"text-xs text-[#6b4a4c]\">Page size</span>\n                  <select\n                    className=\"rounded-xl border border-[#e7d0d1] bg-white px-3 py-1 text-sm text-[#1b0e0e]\"\n                    value={pageSize === undefined ? \"\" : String(pageSize)}\n                    onChange={(e) => {\n                      const v = e.target.value;\n                      setPageSize(v === \"\" ? undefined : Number(v));\n                      setPage(1);\n                    }}\n                  >\n                    <option value=\"\">Default</option>\n                    {[12, 24, 36, 48, 60, 100].map((n) => (\n                      <option key={n} value={n}>{n}</option>\n                    ))}\n                  </select>\n                </label>\n                <label className=\"flex flex-col\">\n                  <span className=\"text-xs text-[#6b4a4c]\">Sort by</span>\n                  <select\n                    className=\"rounded-xl border border-[#e7d0d1] bg-white px-3 py-1 text-sm text-[#1b0e0e]\"\n                    value={sortBy ?? \"\"}\n                    onChange={(e) => {\n                      const v = e.target.value as SortBy | \"\";\n                      setSortBy(v === \"\" ? undefined : (v as SortBy));\n                      setPage(1);\n                    }}\n                  >\n                    <option value=\"\">Default</option>\n                    <option value=\"avg\">Avg rating</option>\n                    <option value=\"count\">Movie count</option>\n                  </select>\n                </label>\n                <label className=\"flex flex-col\">\n                  <span className=\"text-xs text-[#6b4a4c]\">Direction</span>\n                  <select\n                    className=\"rounded-xl border border-[#e7d0d1] bg-white px-3 py-1 text-sm text-[#1b0e0e]\"\n                    value={sortDir ?? \"\"}\n                    onChange={(e) => {\n                      const v = e.target.value as SortDir | \"\";\n                      setSortDir(v === \"\" ? undefined : (v as SortDir));\n                      setPage(1);\n                    }}\n                  >\n                    <option value=\"\">Default</option>\n                    <option value=\"desc\">Desc</option>\n                    <option value=\"asc\">Asc</option>\n                  </select>\n                </label>\n                <button\n                  className=\"ml-auto rounded-xl bg-[#994d51] px-3 py-2 text-sm text-white hover:bg-[#7a3d41]\"\n                  onClick={applyFilters}\n                  disabled={isFetching}\n                >Apply</button>\n              </div>\n              <div className=\"text-xs text-[#6b4a4c]\">{role === 'actor' ? `Using sub-criteria for Acting Performance (${ACTING_PERFORMANCE_CRITERIA_ID})` : 'Using overall movie rating'}</div>\n            </div>\n\n            {(isLoading || isFetching) && (\n              <div className=\"text-sm text-[#1b0e0e]\">Loading...</div>\n            )}\n\n            {data && data.items.length === 0 && (\n              <div className=\"text-sm text-[#1b0e0e]\">No results. Try lowering min movies.</div>\n            )}\n\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n              {data?.items.map((p) => (\n                <Link href={`/${p.bestMovieId}`} key={`${p.name}-${p.bestMovieId}`} className=\"group\">\n                  <div className=\"flex flex-col rounded-2xl overflow-hidden bg-white/80 border border-white/20 shadow-sm hover:shadow-md transition-shadow\">\n                    <div className=\"aspect-[2/3] bg-[#f3e7e8] flex items-center justify-center overflow-hidden\">\n                      {p.bestPosterUrl ? (\n                        // eslint-disable-next-line @next/next/no-img-element\n                        <img src={p.bestPosterUrl} alt={p.name} className=\"w-full h-full object-cover group-hover:scale-[1.02] transition-transform\" />\n                      ) : (\n                        <div className=\"text-[#6b4a4c] text-xs\">No poster</div>\n                      )}\n                    </div>\n                    <div className=\"p-3\">\n                      <div className=\"text-sm font-semibold text-[#1b0e0e] truncate\" title={p.name}>{p.name}</div>\n                      <div className=\"text-xs text-[#6b4a4c] truncate\" title={p.bestMovieTitle ?? ''}>{p.bestMovieTitle ?? ''}</div>\n                      <div className=\"mt-1 text-xs text-[#1b0e0e]\">Avg {p.avg.toFixed(2)} • {p.count} movies</div>\n                    </div>\n                  </div>\n                </Link>\n              ))}\n            </div>\n\n            <div className=\"flex items-center justify-between py-4\">\n              <div className=\"text-sm text-[#6b4a4c]\">Total: {total}</div>\n              <div className=\"inline-flex items-center gap-2\">\n                <button\n                  className=\"px-3 py-1.5 rounded-lg border border-[#e7d0d1] bg-white text-sm disabled:opacity-50\"\n                  onClick={() => setPage((p) => Math.max(1, p - 1))}\n                  disabled={page <= 1}\n                >Prev</button>\n                <span className=\"text-sm text-[#1b0e0e]\">Page {page} / {totalPages}</span>\n                <button\n                  className=\"px-3 py-1.5 rounded-lg border border-[#e7d0d1] bg-white text-sm disabled:opacity-50\"\n                  onClick={() => setPage((p) => Math.min(totalPages, p + 1))}\n                  disabled={page >= totalPages}\n                >Next</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\best\\people\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\criteria\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\new\\PosterUrlField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\new\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\app\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":198,"column":31,"nodeType":"JSXOpeningElement","endLine":202,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\env.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\server\\api\\root.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\server\\api\\routers\\movies.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":440,"column":20,"nodeType":"TSNonNullExpression","messageId":"unnecessaryAssertion","endLine":440,"endColumn":25,"fix":{"range":[19853,19854],"text":""}},{"ruleId":"prefer-const","severity":2,"message":"'list' is never reassigned. Use 'const' instead.","line":598,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":598,"endColumn":15,"fix":{"range":[26166,26248],"text":"const list = Object.values(people).filter((p) => p.count >= (input.minMovies ?? 1));"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { db } from \"~/server/db\";\nimport { bestOf, evaluation, evaluationScore } from \"~/server/db/schema\";\nimport { z } from \"zod\";\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { sql } from \"drizzle-orm\";\nimport { criteria } from \"~/server/db/schema\";\nimport { movie } from \"~/server/db/schema\";\nimport { movieCriteriaOverride, criteriaDefaultApplicability } from \"~/server/db/schema\";\n\nexport const movieRouter = createTRPCRouter({\n  upsertEvaluationScore: publicProcedure\n    .input(z.object({\n      movieId: z.string(),\n      criteriaId: z.string(),\n      score: z.number().min(0).max(5),\n    }))\n    .mutation(async ({ input }) => {\n      // Find or create evaluation for this movie (single-user, so just one evaluation per movie)\n      let evalRow = await db.query.evaluation.findFirst({ where: (e, { eq }) => eq(e.movieId, input.movieId) });\n      if (!evalRow) {\n        const [newEval] = await db.insert(evaluation).values({\n          movieId: input.movieId,\n          date: new Date(),\n        }).returning();\n        evalRow = newEval;\n      }\n      if (!evalRow) throw new Error(\"Failed to create or find evaluation\");\n      // Upsert evaluationScore\n      const existing = await db.query.evaluationScore.findFirst({\n        where: (s, { eq, and }) => and(eq(s.evaluationId, evalRow.id), eq(s.criteriaId, input.criteriaId)),\n      });\n      if (existing) {\n        await db.update(evaluationScore)\n          .set({ score: input.score.toString() })\n          .where(sql`id = ${existing.id}`);\n      } else {\n        await db.insert(evaluationScore).values({\n          evaluationId: evalRow.id,\n          criteriaId: input.criteriaId,\n          score: input.score.toString(),\n        });\n      }\n      return { success: true };\n    }),\n\n  // List overrides for a movie\n  getMovieCriteriaOverrides: publicProcedure\n    .input(z.object({ movieId: z.string() }))\n    .query(async ({ input }) => {\n      return db.query.movieCriteriaOverride.findMany({ where: (o, { eq }) => eq(o.movieId, input.movieId) });\n    }),\n\n  // Clear override (delete) for a movie+criteria\n  clearMovieCriteriaOverride: publicProcedure\n    .input(z.object({ movieId: z.string(), criteriaId: z.string() }))\n    .mutation(async ({ input }) => {\n      const existing = await db.query.movieCriteriaOverride.findFirst({\n        where: (o, { and, eq }) => and(eq(o.movieId, input.movieId), eq(o.criteriaId, input.criteriaId)),\n      });\n      if (existing) {\n        await db.delete(movieCriteriaOverride).where(sql`id = ${existing.id}`);\n      }\n      return { success: true };\n    }),\n  // Best-of endpoints\n  setBestOf: publicProcedure\n    .input(z.object({ criteriaId: z.string(), movieId: z.string(), clipUrl: z.string().optional().nullable() }))\n    .mutation(async ({ input }) => {\n      // Upsert one global best for the criteria\n      const existing = await db.query.bestOf.findFirst({ where: (b, { eq }) => eq(b.criteriaId, input.criteriaId) });\n      if (existing) {\n        await db.update(bestOf)\n          .set({ movieId: input.movieId, clipUrl: input.clipUrl ?? null })\n          .where(sql`id = ${existing.id}`);\n      } else {\n        await db.insert(bestOf).values({ criteriaId: input.criteriaId, movieId: input.movieId, clipUrl: input.clipUrl ?? null });\n      }\n      return { success: true };\n    }),\n  getBestOfForAll: publicProcedure\n    .query(async () => {\n      return db.select().from(bestOf);\n    }),\n  getBestOfForCriteria: publicProcedure\n    .input(z.object({ criteriaId: z.string() }))\n    .query(async ({ input }) => {\n      return db.query.bestOf.findFirst({ where: (b, { eq }) => eq(b.criteriaId, input.criteriaId) });\n    }),\n  // Curated list (top-N) endpoints\n  addToBestOfList: publicProcedure\n    .input(z.object({ criteriaId: z.string(), movieId: z.string(), clipUrl: z.string().optional().nullable() }))\n    .mutation(async ({ input }) => {\n      const existingForCriteria = await db.query.bestOf.findMany({ where: (b, { eq }) => eq(b.criteriaId, input.criteriaId) });\n      // If the movie already exists in the list, just update clip\n      const existingMovie = existingForCriteria.find((r) => r.movieId === input.movieId);\n      if (existingMovie) {\n        await db.update(bestOf).set({ clipUrl: input.clipUrl ?? null }).where(sql`id = ${existingMovie.id}`);\n        return { success: true };\n      }\n      const maxPos = existingForCriteria.reduce((acc, r) => Math.max(acc, r.position ?? -1), -1);\n      await db.insert(bestOf).values({\n        criteriaId: input.criteriaId,\n        movieId: input.movieId,\n        clipUrl: input.clipUrl ?? null,\n        position: maxPos + 1,\n      });\n      return { success: true };\n    }),\n  replaceInBestOfList: publicProcedure\n    .input(z.object({ criteriaId: z.string(), oldMovieId: z.string(), newMovieId: z.string() }))\n    .mutation(async ({ input }) => {\n      const row = await db.query.bestOf.findFirst({ where: (b, { and, eq }) => and(eq(b.criteriaId, input.criteriaId), eq(b.movieId, input.oldMovieId)) });\n      if (!row) throw new Error(\"Old movie is not in the curated list\");\n      // If the new movie already exists, swap their movieIds by assigning new to this row and delete the duplicate\n      const dup = await db.query.bestOf.findFirst({ where: (b, { and, eq }) => and(eq(b.criteriaId, input.criteriaId), eq(b.movieId, input.newMovieId)) });\n      if (dup) {\n        // Remove duplicate; keep current row and set its movieId to newMovieId\n        await db.update(bestOf).set({ movieId: input.newMovieId }).where(sql`id = ${row.id}`);\n        await db.delete(bestOf).where(sql`id = ${dup.id}`);\n      } else {\n        await db.update(bestOf).set({ movieId: input.newMovieId }).where(sql`id = ${row.id}`);\n      }\n      return { success: true };\n    }),\n  reorderBestOfList: publicProcedure\n    .input(z.object({ criteriaId: z.string(), orderedMovieIds: z.array(z.string()) }))\n    .mutation(async ({ input }) => {\n      // Fetch all rows for criteria\n      const rows = await db.query.bestOf.findMany({ where: (b, { eq }) => eq(b.criteriaId, input.criteriaId) });\n      // Map movieId -> row (guard against null movieId)\n      const map = new Map<string, typeof rows[number]>()\n      for (const r of rows) {\n        if (r.movieId) map.set(r.movieId, r);\n      }\n      // Assign positions by order\n      for (let i = 0; i < input.orderedMovieIds.length; i++) {\n        const mid = input.orderedMovieIds[i];\n        const r = map.get(mid ?? \"\");\n        if (r) {\n          await db.update(bestOf).set({ position: i }).where(sql`id = ${r.id}`);\n        }\n      }\n      return { success: true };\n    }),\n  getBestOfListForCriteria: publicProcedure\n    .input(z.object({ criteriaId: z.string() }))\n    .query(async ({ input }) => {\n      const rows = await db.query.bestOf.findMany({ where: (b, { eq }) => eq(b.criteriaId, input.criteriaId) });\n      // Sort position asc (nulls last), then createdAt desc as tiebreaker\n      return rows.sort((a, b) => {\n        const pa = a.position ?? Number.MAX_SAFE_INTEGER;\n        const pb = b.position ?? Number.MAX_SAFE_INTEGER;\n        if (pa !== pb) return pa - pb;\n        const da = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n        const dbt = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n        return dbt - da;\n      });\n    }),\n  updateCriteriaWeight: publicProcedure\n    .input(z.object({ id: z.string(), weight: z.number().min(0).max(100) }))\n    .mutation(async ({ input }) => {\n      await db.update(criteria)\n        .set({ weight: input.weight })\n        .where(sql`id = ${input.id}`);\n      return { success: true };\n    }),\n  updateCriteriaWeights: publicProcedure\n    .input(z.object({ updates: z.array(z.object({ id: z.string(), weight: z.number().min(0).max(100) })) }))\n    .mutation(async ({ input }) => {\n      for (const u of input.updates) {\n        await db.update(criteria).set({ weight: u.weight }).where(sql`id = ${u.id}`);\n      }\n      return { success: true };\n    }),\n  getById: publicProcedure\n    .input(z.object({ id: z.string() }))\n    .query(async ({ input }) => {\n      return db.query.movie.findFirst({ where: (m, { eq }) => eq(m.id, input.id) });\n    }),\n  getAllCriteria: publicProcedure\n    .query(async () => {\n      return db.select().from(criteria);\n    }),\n  createCriteria: publicProcedure\n    .input(z.object({\n      name: z.string().min(1),\n      description: z.string().optional().nullable(),\n      weight: z.number().min(0).max(100).default(0),\n      parentId: z.string().optional().nullable(),\n      position: z.number().int().min(0).optional(),\n    }))\n    .mutation(async ({ input }) => {\n      const siblingCount = await db.query.criteria.findMany({ where: (c, { eq }) => eq(c.parentId, input.parentId ?? \"\") });\n      const pos = input.position ?? siblingCount.length;\n      const [row] = await db.insert(criteria).values({\n        name: input.name,\n        description: input.description ?? null,\n        weight: input.weight,\n        parentId: input.parentId ?? null,\n        position: pos,\n      }).returning();\n      return row;\n    }),\n  updateCriteria: publicProcedure\n    .input(z.object({\n      id: z.string(),\n      name: z.string().min(1).optional(),\n      description: z.string().optional().nullable(),\n      weight: z.number().min(0).max(100).optional(),\n    }))\n    .mutation(async ({ input }) => {\n      await db.update(criteria)\n        .set({\n          ...(input.name !== undefined ? { name: input.name } : {}),\n          ...(input.description !== undefined ? { description: input.description } : {}),\n          ...(input.weight !== undefined ? { weight: input.weight } : {}),\n        })\n        .where(sql`id = ${input.id}`);\n      return { success: true };\n    }),\n  deleteCriteria: publicProcedure\n    .input(z.object({ id: z.string() }))\n    .mutation(async ({ input }) => {\n      // Prevent deleting if referenced or if it has subs\n      const subs = await db.query.criteria.findMany({ where: (c, { eq }) => eq(c.parentId, input.id) });\n      if (subs.length > 0) {\n        throw new Error(\"Cannot delete: criterion has sub-criteria.\");\n      }\n      const refCounts = await Promise.all([\n        db.query.evaluationScore.findMany({ where: (s, { eq }) => eq(s.criteriaId, input.id) }),\n        db.query.bestOf.findMany({ where: (b, { eq }) => eq(b.criteriaId, input.id) }),\n        db.query.movieCriteriaOverride.findMany({ where: (o, { eq }) => eq(o.criteriaId, input.id) }),\n        db.query.criteriaDefaultApplicability.findMany({ where: (d, { eq }) => eq(d.criteriaId, input.id) }),\n      ]);\n      const referenced = refCounts.some(arr => arr.length > 0);\n      if (referenced) {\n        throw new Error(\"Cannot delete: criterion is referenced in scores, best-of, overrides, or defaults.\");\n      }\n      await db.delete(criteria).where(sql`id = ${input.id}`);\n      return { success: true };\n    }),\n  // Force delete: remove references from dependent tables, then delete the criterion.\n  deleteCriteriaForce: publicProcedure\n    .input(z.object({ id: z.string() }))\n    .mutation(async ({ input }) => {\n      // Still do not allow deleting mains that have subs.\n      const subs = await db.query.criteria.findMany({ where: (c, { eq }) => eq(c.parentId, input.id) });\n      if (subs.length > 0) {\n        throw new Error(\"Cannot force delete: criterion has sub-criteria. Delete subs first.\");\n      }\n      // Remove references\n      await db.delete(evaluationScore).where(sql`criteria_id = ${input.id}`);\n      await db.delete(bestOf).where(sql`criteria_id = ${input.id}`);\n      await db.delete(movieCriteriaOverride).where(sql`criteria_id = ${input.id}`);\n      await db.delete(criteriaDefaultApplicability).where(sql`criteria_id = ${input.id}`);\n      // Delete the criterion itself\n      await db.delete(criteria).where(sql`id = ${input.id}`);\n      return { success: true };\n    }),\n  reorderCriteria: publicProcedure\n    .input(z.object({\n      parentId: z.string().optional().nullable(),\n      orderedIds: z.array(z.string()),\n    }))\n    .mutation(async ({ input }) => {\n      // Assign position by index in orderedIds\n      for (let i = 0; i < input.orderedIds.length; i++) {\n        const id = input.orderedIds[i];\n        await db.update(criteria).set({ position: i, parentId: input.parentId ?? null }).where(sql`id = ${id}`);\n      }\n      return { success: true };\n    }),\n  getEvaluationsByMovie: publicProcedure\n    .input(z.object({ movieId: z.string() }))\n    .query(async ({ input }) => {\n      return db.query.evaluation.findMany({ where: (e, { eq }) => eq(e.movieId, input.movieId) });\n    }),\n  getScoresByEvaluationIds: publicProcedure\n    .input(z.object({ evalIds: z.array(z.string()) }))\n    .query(async ({ input }) => {\n      if (input.evalIds.length === 0) return [];\n      return db.query.evaluationScore.findMany({ where: (s, { inArray }) => inArray(s.evaluationId, input.evalIds) });\n    }),\n  createMovie: publicProcedure\n    .input(z.object({ title: z.string().optional().nullable(), year: z.number().optional().nullable(), genre: z.string().optional().nullable(), type: z.string().optional().nullable(), posterUrl: z.string().url().optional().nullable()}))\n    .mutation(async ({ input }) => {\n      return db.insert(movie).values(input).returning()\n    }\n    )\n  ,\n  updateMoviePoster: publicProcedure\n    .input(z.object({ id: z.string(), posterUrl: z.string().url().optional().nullable() }))\n    .mutation(async ({ input }) => {\n      await db.update(movie)\n        .set({ posterUrl: input.posterUrl ?? null })\n        .where(sql`id = ${input.id}`);\n      return { success: true };\n    }),\n  searchMovies: publicProcedure\n    .input(z.object({ q: z.string().min(1), limit: z.number().int().min(1).max(50).optional() }))\n    .query(async ({ input }) => {\n      const q = input.q.trim().toLowerCase();\n      const lim = input.limit ?? 10;\n      if (!q) return [];\n      // Case-insensitive contains match over title\n      const rows = await db.select().from(movie).where(sql`lower(${movie.title}) like ${`%${q}%`}`).limit(lim);\n      return rows;\n    }),\n\n  // Compute applicable criteria for a given movie (defaults + per-movie overrides)\n  getApplicableCriteriaForMovie: publicProcedure\n    .input(z.object({ movieId: z.string() }))\n    .query(async ({ input }) => {\n      const mv = await db.query.movie.findFirst({ where: (m, { eq }) => eq(m.id, input.movieId) });\n      if (!mv) throw new Error(\"Movie not found\");\n      const allCriteria = await db.select().from(criteria);\n      const overrides = await db.query.movieCriteriaOverride.findMany({ where: (o, { eq }) => eq(o.movieId, input.movieId) });\n      const defaults = await db.query.criteriaDefaultApplicability.findMany();\n\n      // Build quick maps\n      const overrideMap = new Map<string, string>();\n      for (const o of overrides) {\n        if (o.criteriaId && o.mode) overrideMap.set(o.criteriaId, o.mode);\n      }\n      const defaultMap = new Map<string, typeof defaults[number]>();\n      for (const d of defaults) {\n        if (d.criteriaId) defaultMap.set(d.criteriaId, d);\n      }\n\n      const parseCsv = (csv?: string | null) =>\n        (csv ?? \"\")\n          .split(\",\")\n          .map((s) => s.trim().toLowerCase())\n          .filter(Boolean);\n\n      const mvType = (mv.type ?? \"\").toLowerCase();\n      const mvGenres = parseCsv(mv.genre);\n\n      const applicable = allCriteria.filter((c) => {\n        const cid = c.id;\n        if (!cid) return false;\n        // Start with default: include unless defaultMode === 'exclude'\n        const d = defaultMap.get(cid);\n        let include = (d?.defaultMode ?? \"include\").toLowerCase() !== \"exclude\";\n        if (d) {\n          const incTypes = parseCsv(d.includeTypesCsv);\n          const excTypes = parseCsv(d.excludeTypesCsv);\n          const incGenres = parseCsv(d.includeGenresCsv);\n          const excGenres = parseCsv(d.excludeGenresCsv);\n\n          if (incTypes.length > 0) include = incTypes.includes(mvType);\n          if (excTypes.length > 0 && excTypes.includes(mvType)) include = false;\n\n          if (incGenres.length > 0) include = incGenres.some((g) => mvGenres.includes(g));\n          if (excGenres.length > 0 && excGenres.some((g) => mvGenres.includes(g))) include = false;\n        }\n        // Apply override last\n        const ov = overrideMap.get(cid);\n        if (ov) include = ov === \"include\";\n        return include;\n      });\n\n      return applicable;\n    }),\n\n  // Upsert a per-movie criteria override\n  setMovieCriteriaOverride: publicProcedure\n    .input(z.object({ movieId: z.string(), criteriaId: z.string(), mode: z.enum([\"include\", \"exclude\"]) }))\n    .mutation(async ({ input }) => {\n      const existing = await db.query.movieCriteriaOverride.findFirst({\n        where: (o, { and, eq }) => and(eq(o.movieId, input.movieId), eq(o.criteriaId, input.criteriaId)),\n      });\n      if (existing) {\n        await db.update(movieCriteriaOverride)\n          .set({ mode: input.mode })\n          .where(sql`id = ${existing.id}`);\n      } else {\n        await db.insert(movieCriteriaOverride).values({ movieId: input.movieId, criteriaId: input.criteriaId, mode: input.mode });\n      }\n      return { success: true };\n    }),\n\n  // Upsert a criteria default applicability rule (single row per criteriaId in practice)\n  setCriteriaDefaultApplicability: publicProcedure\n    .input(z.object({\n      criteriaId: z.string(),\n      defaultMode: z.enum([\"include\", \"exclude\"]).optional().nullable(),\n      includeTypesCsv: z.string().optional().nullable(),\n      excludeTypesCsv: z.string().optional().nullable(),\n      includeGenresCsv: z.string().optional().nullable(),\n      excludeGenresCsv: z.string().optional().nullable(),\n    }))\n    .mutation(async ({ input }) => {\n      const existing = await db.query.criteriaDefaultApplicability.findFirst({\n        where: (d, { eq }) => eq(d.criteriaId, input.criteriaId),\n      });\n      const payload = {\n        defaultMode: input.defaultMode ?? null,\n        includeTypesCsv: input.includeTypesCsv ?? null,\n        excludeTypesCsv: input.excludeTypesCsv ?? null,\n        includeGenresCsv: input.includeGenresCsv ?? null,\n        excludeGenresCsv: input.excludeGenresCsv ?? null,\n      };\n      if (existing) {\n        await db.update(criteriaDefaultApplicability).set(payload).where(sql`id = ${existing.id}`);\n      } else {\n        await db.insert(criteriaDefaultApplicability).values({ criteriaId: input.criteriaId, ...payload });\n      }\n      return { success: true };\n    }),\n\n  // List all default applicability rules\n  getCriteriaDefaultApplicability: publicProcedure\n    .query(async () => {\n      return db.select().from(criteriaDefaultApplicability);\n    }),\n\n  // Reference info for criteria: whether it has subs or is referenced elsewhere\n  getCriteriaReferenceInfo: publicProcedure\n    .query(async () => {\n      const all = await db.select().from(criteria);\n      const info: Record<string, { hasSubs: boolean; referenced: boolean }> = {};\n      const subsByParent = new Map<string, number>();\n      for (const c of all) {\n        if (c.parentId) subsByParent.set(c.parentId, (subsByParent.get(c.parentId) ?? 0) + 1);\n      }\n      // Collect referenced IDs from other tables\n      const [scores, bests, overrides, defaults] = await Promise.all([\n        db.select().from(evaluationScore),\n        db.select().from(bestOf),\n        db.select().from(movieCriteriaOverride),\n        db.select().from(criteriaDefaultApplicability),\n      ]);\n      const referencedIds = new Set<string>();\n      for (const r of scores) if (r.criteriaId) referencedIds.add(r.criteriaId);\n      for (const r of bests) if (r.criteriaId) referencedIds.add(r.criteriaId);\n      for (const r of overrides) if (r.criteriaId) referencedIds.add(r.criteriaId);\n      for (const r of defaults) if (r.criteriaId) referencedIds.add(r.criteriaId);\n      for (const c of all) {\n        const id = c.id!;\n        info[id] = { hasSubs: (subsByParent.get(id) ?? 0) > 0, referenced: referencedIds.has(id) };\n      }\n      return info;\n    }),\n\n  // Update movie type and genre\n  updateMovieMeta: publicProcedure\n    .input(z.object({ id: z.string(), type: z.string().optional().nullable(), genre: z.string().optional().nullable() }))\n    .mutation(async ({ input }) => {\n      await db.update(movie)\n        .set({ type: input.type ?? null, genre: input.genre ?? null })\n        .where(sql`id = ${input.id}`);\n      return { success: true };\n    }),\n\n  // Compute top people by role, with averages and best movie poster\n  getTopPeopleByRole: publicProcedure\n    .input(z.object({\n      role: z.enum([\"actor\", \"writer\", \"director\"]),\n      page: z.number().int().min(1).optional().default(1),\n      pageSize: z.number().int().min(1).max(100).optional().default(20),\n      minMovies: z.number().int().min(1).optional().default(1),\n      // For actors, specify which sub-criteria to average (e.g., \"Performance Quality\" id)\n      actorCriteriaId: z.string().optional().nullable(),\n      sortBy: z.enum([\"avg\", \"count\"]).optional().default(\"avg\"),\n      sortDir: z.enum([\"asc\", \"desc\"]).optional().default(\"desc\"),\n    }))\n    .query(async ({ input }) => {\n      // Load required data\n      const [allCriteria, allMovies, evaluations, scores] = await Promise.all([\n        db.select().from(criteria),\n        db.select().from(movie),\n        db.select().from(evaluation),\n        db.select().from(evaluationScore),\n      ]);\n\n      // Organize criteria\n      const mainCriteria = allCriteria.filter((c) => !c.parentId);\n      const subCriteria = allCriteria.filter((c) => c.parentId);\n\n      // Index scores by evaluationId\n      const evalScores: Record<string, { criteriaId: string; score: number }[]> = {};\n      for (const s of scores) {\n        if (s.evaluationId && s.criteriaId != null && s.score != null) {\n          const arr = (evalScores[s.evaluationId] ||= []);\n          arr.push({ criteriaId: s.criteriaId, score: Number(s.score) });\n        }\n      }\n\n      // Map movie -> evaluation ids\n      const movieEvaluations: Record<string, string[]> = {};\n      for (const ev of evaluations) {\n        if (ev.movieId && ev.id) {\n          const arr = (movieEvaluations[ev.movieId] ||= []);\n          arr.push(ev.id);\n        }\n      }\n\n      // Overall weighted score per movie (0-5)\n      const movieScores: Record<string, number> = {};\n      for (const mv of allMovies) {\n        const evalIds = movieEvaluations[mv.id ?? \"\"] || [];\n        let weightedSum = 0;\n        let totalWeight = 0;\n        for (const main of mainCriteria) {\n          const subs = subCriteria.filter((sc) => sc.parentId === main.id);\n          let subWeightedSum = 0;\n          let subTotalWeight = 0;\n          for (const sub of subs) {\n            const subScores: number[] = [];\n            for (const evalId of evalIds) {\n              const scoresForEval = evalScores[evalId] || [];\n              const found = scoresForEval.find((s) => s.criteriaId === sub.id);\n              if (found) subScores.push(found.score);\n            }\n            if (subScores.length > 0 && (sub.weight ?? 0) > 0) {\n              const avg = subScores.reduce((a, b) => a + b, 0) / subScores.length;\n              subWeightedSum += avg * (sub.weight ?? 0);\n              subTotalWeight += sub.weight ?? 0;\n            }\n          }\n          if (subTotalWeight > 0 && (main.weight ?? 0) > 0) {\n            const mainValue = subWeightedSum / subTotalWeight;\n            weightedSum += mainValue * (main.weight ?? 0);\n            totalWeight += main.weight ?? 0;\n          }\n        }\n        if (totalWeight > 0) movieScores[mv.id ?? \"\"] = weightedSum / totalWeight;\n      }\n\n      // For actors: compute per-movie average for a specific sub-criteria id if provided\n      const actorSubScoreByMovie: Record<string, number | undefined> = {};\n      if (input.role === \"actor\" && input.actorCriteriaId) {\n        const targetId = input.actorCriteriaId;\n        for (const mv of allMovies) {\n          const evalIds = movieEvaluations[mv.id ?? \"\"] || [];\n          const vals: number[] = [];\n          for (const eid of evalIds) {\n            const sarr = evalScores[eid] || [];\n            const f = sarr.find((s) => s.criteriaId === targetId);\n            if (f) vals.push(f.score);\n          }\n          if (vals.length > 0) actorSubScoreByMovie[mv.id ?? \"\"] = vals.reduce((a, b) => a + b, 0) / vals.length;\n        }\n      }\n\n      // Helper: split CSV names into an array of normalized names\n      const splitCsv = (s?: string | null) =>\n        (s ?? \"\")\n          .split(\",\")\n          .map((x) => x.trim())\n          .filter((x) => x.length > 0);\n\n      type PersonAgg = {\n        name: string;\n        total: number; // sum of scores\n        count: number; // number of movies counted\n        bestMovieId?: string;\n        bestMovieTitle?: string | null;\n        bestPosterUrl?: string | null;\n        bestScore?: number;\n      };\n\n      const people: Record<string, PersonAgg> = {};\n      for (const mv of allMovies) {\n        const mvId = mv.id ?? \"\";\n        let scoreForRole: number | undefined;\n        if (input.role === \"actor\") {\n          scoreForRole = input.actorCriteriaId ? actorSubScoreByMovie[mvId] : movieScores[mvId];\n        } else {\n          scoreForRole = movieScores[mvId];\n        }\n        if (scoreForRole == null) continue;\n\n        let names: string[] = [];\n        if (input.role === \"actor\") names = splitCsv(mv.actors);\n        else if (input.role === \"writer\") names = splitCsv(mv.writer);\n        else if (input.role === \"director\") names = splitCsv(mv.director);\n\n        for (const name of names) {\n          const key = name; // keep original casing for display\n          if (!people[key]) {\n            people[key] = { name: key, total: 0, count: 0 };\n          }\n          const agg = people[key];\n          agg.total += scoreForRole;\n          agg.count += 1;\n          if (agg.bestScore == null || scoreForRole > agg.bestScore) {\n            agg.bestScore = scoreForRole;\n            agg.bestMovieId = mv.id ?? undefined;\n            agg.bestMovieTitle = mv.title ?? null;\n            agg.bestPosterUrl = mv.posterUrl ?? null;\n          }\n        }\n      }\n\n      // Build list and filter by minMovies\n      let list = Object.values(people).filter((p) => p.count >= (input.minMovies ?? 1));\n\n      // Compute averages\n      const items = list.map((p) => ({\n        name: p.name,\n        avg: p.count > 0 ? p.total / p.count : 0,\n        count: p.count,\n        bestMovieId: p.bestMovieId,\n        bestMovieTitle: p.bestMovieTitle,\n        bestPosterUrl: p.bestPosterUrl,\n        bestScore: p.bestScore,\n      }));\n\n      // Sorting\n      items.sort((a, b) => {\n        const dir = input.sortDir === \"asc\" ? 1 : -1;\n        if (input.sortBy === \"count\") {\n          if (a.count !== b.count) return dir * (a.count - b.count);\n          if (a.avg !== b.avg) return dir * (a.avg - b.avg);\n        } else {\n          if (a.avg !== b.avg) return dir * (a.avg - b.avg);\n          if (a.count !== b.count) return dir * (a.count - b.count);\n        }\n        return a.name.localeCompare(b.name);\n      });\n\n      const total = items.length;\n      const page = input.page ?? 1;\n      const pageSize = input.pageSize ?? 20;\n      const start = (page - 1) * pageSize;\n      const end = start + pageSize;\n      const pageItems = items.slice(start, end);\n\n      return { total, page, pageSize, items: pageItems };\n    }),\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\server\\api\\routers\\omdb.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":61,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":61,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from \"zod\";\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { env } from \"~/env\";\nimport { db } from \"~/server/db\";\nimport { movie } from \"~/server/db/schema\";\nimport { and, isNotNull, isNull } from \"drizzle-orm\";\n\nconst OmdbResponseSchema = z.object({\n    Title: z.string(),\n  Year: z.string(),\n  Rated: z.string(),\n  Released: z.string(),\n  Runtime: z.string(),\n  Genre: z.string(),\n  Director: z.string(),\n  Writer: z.string(),\n  Actors: z.string(),\n  Plot: z.string(),\n  Language: z.string(),\n  Country: z.string(),\n  Awards: z.string(),\n  Poster: z.string().url(),\n  imdbID: z.string(),\n  Type: z.string(),\n  DVD: z.string(),\n  BoxOffice: z.string(),\n  Production: z.string(),\n  Website: z.string(),\n  Response: z.string()\n});\n\n\nexport const omdbRouter = createTRPCRouter({\n  getByTitle: publicProcedure\n    .input(z.object({\n      title: z.string().min(1, \"Title is required\"),\n      year: z.string().optional(),\n    }))\n    .mutation(async ({ input }) => {\n      if (!env.OMDB_API_KEY) {\n        throw new Error(\"OMDb API key missing\");\n      }\n    const BATCH_SIZE = 5;\n\nconst titles = await db\n  .select({ title: movie.title, year: movie.year })\n  .from(movie)\n  .where(and(isNull(movie.posterUrl), isNotNull(movie.title)))\n\nfor (let i = 0; i < titles.length; i += BATCH_SIZE) {\n  const batch = titles.slice(i, i + BATCH_SIZE);\n\n  await Promise.all(\n    batch.map(async (title) => {\n      const url = new URL(\"https://www.omdbapi.com/\");\n      url.searchParams.set(\"t\", title.title ?? \"\");\n      if (title.year) url.searchParams.set(\"y\", title.year.toString() ?? \"\");\n      url.searchParams.set(\"apikey\", env.OMDB_API_KEY ?? \"\");\n\n      const res = await fetch(url.toString());\n      const data = await res.json();\n\n\n      const parsed = OmdbResponseSchema.safeParse(data);\n      if (!parsed.success) {\n        console.log(title, parsed.error)\n        return\n      }\n\n      const d = parsed.data;\n      // Parse box office (e.g., \"$1,234,567\") to a cleaned string or null\n      let boxOffice: string | null = null;\n      if (d.BoxOffice && d.BoxOffice !== \"N/A\") {\n        const cleaned = d.BoxOffice.replace(/\\$/g, \"\").replace(/,/g, \"\");\n        const numeric = Number(cleaned);\n        boxOffice = Number.isNaN(numeric) ? null : cleaned;\n      }\n\n      // Parse year to number | null\n      const yearNum = parseInt(d.Year, 10);\n      const year = Number.isNaN(yearNum) ? null : yearNum;\n\n      // Explicitly map OMDb response to our DB insert type\n      const newData: typeof movie.$inferInsert = {\n        title: d.Title,\n        type: d.Type,\n        year,\n        genre: d.Genre,\n        posterUrl: d.Poster,\n        imdbID: d.imdbID,\n        rated: d.Rated,\n        released: d.Released,\n        runtime: d.Runtime,\n        director: d.Director,\n        writer: d.Writer,\n        actors: d.Actors,\n        plot: d.Plot,\n        language: d.Language,\n        country: d.Country,\n        awards: d.Awards,\n        dvd: d.DVD,\n        boxOffice,\n        production: d.Production,\n        website: d.Website,\n        response: d.Response,\n      };\n      console.log(newData)\n\n      await db\n        .insert(movie)\n        .values(newData)\n        .onConflictDoUpdate({\n          target: movie.title,\n          set: newData,\n        })\n        .catch((err) => console.error(err))\n        .finally(() => console.log(`Processed: ${title.title}`));\n    })\n  );\n}\nreturn {\"data\": {\"Poster\": \"\"}}\n    })\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\server\\api\\trpc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\server\\db\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\server\\db\\schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\trpc\\query-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\trpc\\react.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\zsamb\\Documents\\dev\\cinecritique\\src\\trpc\\server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]